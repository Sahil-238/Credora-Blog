"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[59177],{59177:(e,n,t)=>{t.r(n),t.d(n,{default:()=>l});var a=t(12198),r=t(96540),s=t.n(r),o=t(71181),i=t(15235),c=t(90956);const l=()=>s().createElement(o.P.div,{initial:{opacity:0},animate:{opacity:1},transition:{duration:.5},className:"max-w-4xl mx-auto"},s().createElement("h1",{className:"text-4xl font-bold mb-6"},"JavaScript Performance"),s().createElement("div",{className:"bg-blue-50 p-6 rounded-xl mb-8"},s().createElement("h2",{className:"text-2xl font-semibold mb-4"},"Understanding Performance"),s().createElement("p",{className:"text-gray-700 mb-4"},"Learn about JavaScript performance optimization, including memory management, code optimization, async performance, and monitoring techniques.")),s().createElement("div",{className:"space-y-8"},[{title:"Performance Basics",content:"JavaScript performance:\n• Execution context\n• Memory management\n• Garbage collection\n• Event loop\n• Call stack\n• Task queue\n• Microtasks",code:"// Memory management example\nlet heavyObject = null;\n\nfunction createHeavyObject() {\n  heavyObject = {\n    data: new Array(1000000),\n    process() {\n      // Heavy computation\n    }\n  };\n}\n\nfunction cleanupHeavyObject() {\n  heavyObject = null;  // Allow GC\n}\n\n// Event loop example\nconsole.log('Start');\n\nsetTimeout(() => {\n  console.log('Timeout');\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log('Promise');\n});\n\nconsole.log('End');\n\n// Output:\n// Start\n// End\n// Promise\n// Timeout"},{title:"Code Optimization",content:"Code optimization techniques:\n• Algorithm efficiency\n• Data structures\n• Loop optimization\n• Function optimization\n• Memory usage\n• String manipulation\n• Array operations",code:"// Loop optimization\nconst arr = new Array(1000000);\n\n// Bad: Creating function in loop\nfor (let i = 0; i < arr.length; i++) {\n  arr[i] = function(x) { return x * i; };\n}\n\n// Good: Function hoisting\nfunction multiply(x, i) {\n  return x * i;\n}\nfor (let i = 0; i < arr.length; i++) {\n  arr[i] = multiply.bind(null, i);\n}\n\n// Array optimization\nconst numbers = [1, 2, 3, 4, 5];\n\n// Bad: Multiple array traversals\nconst result = numbers\n  .map(n => n * 2)\n  .filter(n => n > 5)\n  .reduce((sum, n) => sum + n, 0);\n\n// Good: Single traversal\nconst optimizedResult = numbers.reduce((acc, n) => {\n  const doubled = n * 2;\n  if (doubled > 5) {\n    acc.sum += doubled;\n  }\n  return acc;\n}, { sum: 0 }).sum;"},{title:"Memory Management",content:"Memory optimization:\n• Memory leaks\n• Closure cleanup\n• WeakMap/WeakSet\n• Object pooling\n• Buffer management\n• Cache strategies\n• Resource disposal",code:"// Memory leak prevention\nclass ResourceManager {\n  #resources = new WeakMap();\n  \n  allocate(owner, resource) {\n    this.#resources.set(owner, resource);\n  }\n  \n  release(owner) {\n    const resource = this.#resources.get(owner);\n    if (resource) {\n      resource.dispose();\n      this.#resources.delete(owner);\n    }\n  }\n}\n\n// Object pooling\nclass ObjectPool {\n  constructor(factory, size = 1000) {\n    this.factory = factory;\n    this.pool = new Array(size);\n    this.init();\n  }\n  \n  init() {\n    for (let i = 0; i < this.pool.length; i++) {\n      this.pool[i] = this.factory();\n    }\n  }\n  \n  acquire() {\n    return this.pool.pop() || this.factory();\n  }\n  \n  release(obj) {\n    if (this.pool.length < this.pool.length) {\n      this.pool.push(obj);\n    }\n  }\n}\n\n// Usage\nconst vectorPool = new ObjectPool(() => ({ x: 0, y: 0 }));\nconst vector = vectorPool.acquire();\n// Use vector\nvectorPool.release(vector);"},{title:"Async Performance",content:"Async optimization:\n• Promise optimization\n• Worker threads\n• Task scheduling\n• Lazy loading\n• Debouncing\n• Throttling\n• Request batching",code:"// Worker thread example\nconst worker = new Worker('worker.js');\n\nworker.postMessage({ data: largeArray });\nworker.onmessage = function(e) {\n  console.log('Processed:', e.data);\n};\n\n// Debouncing\nfunction debounce(fn, delay) {\n  let timeoutId;\n  \n  return function(...args) {\n    clearTimeout(timeoutId);\n    \n    timeoutId = setTimeout(() => {\n      fn.apply(this, args);\n    }, delay);\n  };\n}\n\n// Throttling\nfunction throttle(fn, limit) {\n  let inThrottle;\n  \n  return function(...args) {\n    if (!inThrottle) {\n      fn.apply(this, args);\n      inThrottle = true;\n      \n      setTimeout(() => {\n        inThrottle = false;\n      }, limit);\n    }\n  };\n}\n\n// Request batching\nclass RequestBatcher {\n  constructor(batchSize = 10, delay = 100) {\n    this.queue = [];\n    this.batchSize = batchSize;\n    this.delay = delay;\n    this.timeout = null;\n  }\n  \n  add(request) {\n    this.queue.push(request);\n    \n    if (this.queue.length >= this.batchSize) {\n      this.flush();\n    } else if (!this.timeout) {\n      this.timeout = setTimeout(() => this.flush(), this.delay);\n    }\n  }\n  \n  async flush() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n    \n    const batch = this.queue.splice(0, this.batchSize);\n    if (batch.length > 0) {\n      await this.processBatch(batch);\n    }\n  }\n  \n  async processBatch(batch) {\n    // Process batch of requests\n  }\n}"},{title:"Profiling & Monitoring",content:"Performance monitoring:\n• Chrome DevTools\n• Performance API\n• Memory profiling\n• CPU profiling\n• Network monitoring\n• Metrics collection\n• Benchmarking",code:"// Performance measurement\nconst performance = window.performance;\n\n// Mark start\nperformance.mark('startOperation');\n\n// Expensive operation\nfor (let i = 0; i < 1000000; i++) {\n  // ...\n}\n\n// Mark end\nperformance.mark('endOperation');\n\n// Measure\nperformance.measure(\n  'operationDuration',\n  'startOperation',\n  'endOperation'\n);\n\n// Get measurements\nconst measurements = performance.getEntriesByType('measure');\nconsole.log(measurements);\n\n// Custom performance monitoring\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = new Map();\n  }\n  \n  start(label) {\n    this.metrics.set(label, {\n      startTime: performance.now(),\n      measurements: []\n    });\n  }\n  \n  end(label) {\n    const metric = this.metrics.get(label);\n    if (metric) {\n      const duration = performance.now() - metric.startTime;\n      metric.measurements.push(duration);\n      \n      // Calculate statistics\n      const avg = this.calculateAverage(metric.measurements);\n      const std = this.calculateStdDev(metric.measurements, avg);\n      \n      console.log(`${label} Statistics:\n        Count: ${metric.measurements.length}\n        Average: ${avg.toFixed(2)}ms\n        StdDev: ${std.toFixed(2)}ms`);\n    }\n  }\n  \n  calculateAverage(numbers) {\n    return numbers.reduce((sum, n) => sum + n, 0) / numbers.length;\n  }\n  \n  calculateStdDev(numbers, mean) {\n    const variance = numbers.reduce((sum, n) => {\n      const diff = n - mean;\n      return sum + diff * diff;\n    }, 0) / numbers.length;\n    \n    return Math.sqrt(variance);\n  }\n}"}].map(((e,n)=>s().createElement(o.P.div,{key:n,initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5,delay:.1*n},className:"border border-gray-200 rounded-xl p-6 hover:border-blue-500 transition-colors"},s().createElement("h2",{className:"text-2xl font-semibold mb-4"},e.title),s().createElement("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6"},s().createElement("div",null,s().createElement("p",{className:"text-gray-600 whitespace-pre-line mb-4"},e.content)),s().createElement("div",null,s().createElement(i.A,{language:"javascript",style:c.A,className:"rounded-lg"},e.code))))))),s().createElement("div",{className:"mt-12 bg-red-50 p-6 rounded-xl"},s().createElement("h3",{className:"text-xl font-semibold mb-4"},"Common Mistakes"),s().createElement("ul",{className:"space-y-3"},s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-red-600 mr-2"},"•"),s().createElement("p",{className:"text-gray-700"},"Creating functions inside loops")),s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-red-600 mr-2"},"•"),s().createElement("p",{className:"text-gray-700"},"Not cleaning up event listeners and timers")),s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-red-600 mr-2"},"•"),s().createElement("p",{className:"text-gray-700"},"Inefficient DOM manipulation")))),s().createElement("div",{className:"mt-12 bg-green-50 p-6 rounded-xl"},s().createElement("h3",{className:"text-xl font-semibold mb-4"},"Best Practices"),s().createElement("ul",{className:"space-y-3"},s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-green-600 mr-2"},"•"),s().createElement("p",{className:"text-gray-700"},"Use appropriate data structures and algorithms")),s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-green-600 mr-2"},"•"),s().createElement("p",{className:"text-gray-700"},"Implement proper memory management")),s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-green-600 mr-2"},"•"),s().createElement("p",{className:"text-gray-700"},"Monitor and profile performance regularly")))),s().createElement(a.default,null))}}]);