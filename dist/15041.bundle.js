"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[15041],{15041:(e,n,t)=>{t.r(n),t.d(n,{default:()=>l});var a=t(12198),r=t(96540),s=t.n(r),i=t(71181),o=t(15235),c=t(90956);const l=()=>s().createElement(i.P.div,{initial:{opacity:0},animate:{opacity:1},transition:{duration:.5},className:"max-w-4xl mx-auto"},s().createElement("h1",{className:"text-4xl font-bold mb-6"},"JavaScript Security"),s().createElement("div",{className:"bg-blue-50 p-6 rounded-xl mb-8"},s().createElement("h2",{className:"text-2xl font-semibold mb-4"},"Understanding Security"),s().createElement("p",{className:"text-gray-700 mb-4"},"Learn about JavaScript security, including common vulnerabilities, input validation, authentication, and data protection.")),s().createElement("div",{className:"space-y-8"},[{title:"Common Vulnerabilities",content:"JavaScript security risks:\n• Cross-Site Scripting (XSS)\n• Cross-Site Request Forgery\n• SQL Injection\n• DOM-based vulnerabilities\n• Prototype pollution\n• Insecure dependencies\n• Data exposure",code:"// XSS vulnerability example\nfunction displayUserInput(input) {\n  // Unsafe: Direct DOM manipulation\n  document.getElementById('output').innerHTML = input;\n  \n  // Safe: Escape HTML\n  const escaped = input\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n  document.getElementById('output').innerHTML = escaped;\n  \n  // Better: Use textContent\n  document.getElementById('output').textContent = input;\n}\n\n// CSRF protection\nconst csrfToken = Math.random().toString(36).substring(2);\ndocument.cookie = `csrf=${csrfToken}; SameSite=Strict`;\n\nfetch('/api/data', {\n  method: 'POST',\n  headers: {\n    'CSRF-Token': csrfToken\n  },\n  credentials: 'same-origin'\n});"},{title:"Input Validation",content:"Input validation:\n• Data sanitization\n• Type checking\n• Schema validation\n• Boundary validation\n• Format validation\n• Encoding/Decoding\n• Whitelist validation",code:"// Input validation class\nclass InputValidator {\n  static validateEmail(email) {\n    const pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!pattern.test(email)) {\n      throw new Error('Invalid email format');\n    }\n    return email.toLowerCase();\n  }\n  \n  static validatePassword(password) {\n    if (password.length < 8) {\n      throw new Error('Password too short');\n    }\n    if (!/[A-Z]/.test(password)) {\n      throw new Error('Password needs uppercase');\n    }\n    if (!/[a-z]/.test(password)) {\n      throw new Error('Password needs lowercase');\n    }\n    if (!/[0-9]/.test(password)) {\n      throw new Error('Password needs number');\n    }\n    return password;\n  }\n  \n  static sanitizeHTML(input) {\n    const div = document.createElement('div');\n    div.textContent = input;\n    return div.innerHTML;\n  }\n  \n  static validateJSON(input) {\n    try {\n      const parsed = JSON.parse(input);\n      return this.sanitizeObject(parsed);\n    } catch (error) {\n      throw new Error('Invalid JSON format');\n    }\n  }\n  \n  static sanitizeObject(obj) {\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.sanitizeObject(item));\n    }\n    if (typeof obj === 'object' && obj !== null) {\n      const clean = {};\n      for (const [key, value] of Object.entries(obj)) {\n        clean[this.sanitizeString(key)] = this.sanitizeObject(value);\n      }\n      return clean;\n    }\n    if (typeof obj === 'string') {\n      return this.sanitizeString(obj);\n    }\n    return obj;\n  }\n  \n  static sanitizeString(str) {\n    return str.replace(/[<>]/g, '');\n  }\n}"},{title:"Authentication & Authorization",content:"Security measures:\n• Token-based auth\n• Session management\n• Password hashing\n• OAuth integration\n• Role-based access\n• JWT handling\n• Secure storage",code:"// JWT handling\nclass AuthService {\n  static generateToken(user) {\n    const header = {\n      alg: 'HS256',\n      typ: 'JWT'\n    };\n    \n    const payload = {\n      sub: user.id,\n      name: user.name,\n      roles: user.roles,\n      exp: Math.floor(Date.now() / 1000) + (60 * 60) // 1 hour\n    };\n    \n    return this.signJWT(header, payload);\n  }\n  \n  static verifyToken(token) {\n    try {\n      const [headerB64, payloadB64, signature] = token.split('.');\n      \n      const header = JSON.parse(atob(headerB64));\n      const payload = JSON.parse(atob(payloadB64));\n      \n      if (payload.exp < Math.floor(Date.now() / 1000)) {\n        throw new Error('Token expired');\n      }\n      \n      // Verify signature (simplified)\n      const expectedSignature = this.calculateSignature(headerB64, payloadB64);\n      if (signature !== expectedSignature) {\n        throw new Error('Invalid signature');\n      }\n      \n      return payload;\n    } catch (error) {\n      throw new Error('Invalid token');\n    }\n  }\n  \n  static signJWT(header, payload) {\n    const headerB64 = btoa(JSON.stringify(header));\n    const payloadB64 = btoa(JSON.stringify(payload));\n    const signature = this.calculateSignature(headerB64, payloadB64);\n    \n    return `${headerB64}.${payloadB64}.${signature}`;\n  }\n  \n  static calculateSignature(headerB64, payloadB64) {\n    // In practice, use a proper crypto library\n    return 'signature';\n  }\n}"},{title:"Secure Communication",content:"Communication security:\n• HTTPS usage\n• API security\n• WebSocket security\n• Content Security Policy\n• CORS configuration\n• Certificate pinning\n• Request signing",code:"// Secure API client\nclass SecureAPIClient {\n  constructor(baseURL, options = {}) {\n    this.baseURL = baseURL;\n    this.options = {\n      timeout: 5000,\n      retries: 3,\n      ...options\n    };\n  }\n  \n  async request(endpoint, options = {}) {\n    const url = new URL(endpoint, this.baseURL);\n    \n    // Ensure HTTPS\n    if (url.protocol !== 'https:') {\n      throw new Error('HTTPS required');\n    }\n    \n    const config = {\n      ...this.options,\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n        ...this.options.headers,\n        ...options.headers\n      }\n    };\n    \n    // Add request signing\n    config.headers['X-Signature'] = this.signRequest(\n      url.toString(),\n      config.method,\n      config.body\n    );\n    \n    try {\n      const response = await fetch(url, config);\n      \n      // Verify response\n      this.verifyResponse(response);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      // Handle specific errors\n      if (error.name === 'TypeError') {\n        throw new Error('Network error');\n      }\n      throw error;\n    }\n  }\n  \n  signRequest(url, method, body) {\n    // Implement request signing\n    return 'signature';\n  }\n  \n  verifyResponse(response) {\n    // Verify response headers\n    const signature = response.headers.get('X-Response-Signature');\n    if (!signature) {\n      throw new Error('Missing response signature');\n    }\n    \n    // Implement signature verification\n  }\n}"},{title:"Data Protection",content:"Data security:\n• Encryption\n• Secure storage\n• Data masking\n• Key management\n• Secure cookies\n• Local storage\n• Memory protection",code:"// Secure storage service\nclass SecureStorage {\n  constructor(storage = localStorage) {\n    this.storage = storage;\n    this.prefix = 'secure_';\n  }\n  \n  async setItem(key, value) {\n    const encrypted = await this.encrypt(value);\n    this.storage.setItem(\n      this.prefix + key,\n      JSON.stringify({\n        value: encrypted,\n        timestamp: Date.now()\n      })\n    );\n  }\n  \n  async getItem(key) {\n    const data = this.storage.getItem(this.prefix + key);\n    if (!data) return null;\n    \n    const { value, timestamp } = JSON.parse(data);\n    \n    // Check expiry\n    if (Date.now() - timestamp > 24 * 60 * 60 * 1000) {\n      this.removeItem(key);\n      return null;\n    }\n    \n    return await this.decrypt(value);\n  }\n  \n  removeItem(key) {\n    this.storage.removeItem(this.prefix + key);\n  }\n  \n  async encrypt(data) {\n    // Use Web Crypto API in practice\n    const encoder = new TextEncoder();\n    const dataBuffer = encoder.encode(JSON.stringify(data));\n    \n    // Implement encryption\n    return btoa(String.fromCharCode(...new Uint8Array(dataBuffer)));\n  }\n  \n  async decrypt(encrypted) {\n    // Use Web Crypto API in practice\n    const decoder = new TextDecoder();\n    const dataBuffer = new Uint8Array(\n      atob(encrypted)\n        .split('')\n        .map(char => char.charCodeAt(0))\n    );\n    \n    // Implement decryption\n    return JSON.parse(decoder.decode(dataBuffer));\n  }\n}"}].map(((e,n)=>s().createElement(i.P.div,{key:n,initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5,delay:.1*n},className:"border border-gray-200 rounded-xl p-6 hover:border-blue-500 transition-colors"},s().createElement("h2",{className:"text-2xl font-semibold mb-4"},e.title),s().createElement("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6"},s().createElement("div",null,s().createElement("p",{className:"text-gray-600 whitespace-pre-line mb-4"},e.content)),s().createElement("div",null,s().createElement(o.A,{language:"javascript",style:c.A,className:"rounded-lg"},e.code))))))),s().createElement("div",{className:"mt-12 bg-red-50 p-6 rounded-xl"},s().createElement("h3",{className:"text-xl font-semibold mb-4"},"Common Mistakes"),s().createElement("ul",{className:"space-y-3"},s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-red-600 mr-2"},"•"),s().createElement("p",{className:"text-gray-700"},"Not validating user input properly")),s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-red-600 mr-2"},"•"),s().createElement("p",{className:"text-gray-700"},"Using insecure storage methods")),s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-red-600 mr-2"},"•"),s().createElement("p",{className:"text-gray-700"},"Exposing sensitive data in client-side code")))),s().createElement("div",{className:"mt-12 bg-green-50 p-6 rounded-xl"},s().createElement("h3",{className:"text-xl font-semibold mb-4"},"Best Practices"),s().createElement("ul",{className:"space-y-3"},s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-green-600 mr-2"},"•"),s().createElement("p",{className:"text-gray-700"},"Always validate and sanitize input")),s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-green-600 mr-2"},"•"),s().createElement("p",{className:"text-gray-700"},"Use secure communication protocols")),s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-green-600 mr-2"},"•"),s().createElement("p",{className:"text-gray-700"},"Implement proper authentication and authorization")))),s().createElement(a.default,null))}}]);