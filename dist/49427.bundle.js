"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[49427],{49427:(e,t,n)=>{n.r(t),n.d(t,{default:()=>d});var l=n(96540),a=n.n(l),s=n(71181),r=n(84976);const o=(0,l.createContext)(null),c=(0,l.createContext)(null),m=e=>{let{children:t}=e;const[n,s]=(0,l.useState)("light");return a().createElement(o.Provider,{value:{theme:n,toggleTheme:()=>{s((e=>"light"===e?"dark":"light"))}}},t)},i=()=>{const{theme:e,toggleTheme:t}=(0,l.useContext)(o);return a().createElement("button",{onClick:t,className:"px-4 py-2 rounded transition-colors ".concat("light"===e?"bg-gray-800 text-white hover:bg-gray-900":"bg-yellow-400 text-gray-900 hover:bg-yellow-500")},"Toggle ","light"===e?"Dark":"Light"," Mode")},u=()=>{const e=(0,l.useContext)(c),{theme:t}=(0,l.useContext)(o);return a().createElement("div",{className:"p-4 rounded ".concat("light"===t?"bg-white text-gray-800":"bg-gray-800 text-white")},a().createElement("h3",{className:"font-semibold mb-2"},"User Profile"),a().createElement("p",null,"Name: ",(null==e?void 0:e.name)||"Guest"),a().createElement("p",null,"Role: ",(null==e?void 0:e.role)||"Visitor"))},d=()=>{const[e]=(0,l.useState)({name:"John Doe",role:"Admin"});return a().createElement(m,null,a().createElement(c.Provider,{value:e},a().createElement(s.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},a().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"useContext Hook"),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"What is useContext?"),a().createElement("p",{className:"text-gray-600 mb-4"},'useContext is a Hook that lets you subscribe to React context without introducing nesting. It\'s particularly useful for sharing data that can be considered "global" for a tree of React components.'),a().createElement("div",{className:"bg-pink-50 border-l-4 border-pink-500 p-4 mb-6"},a().createElement("p",{className:"text-pink-700"},a().createElement("strong",null,"Best Practice:")," Use Context for data that needs to be accessed by many components at different nesting levels. Don't overuse it for data that should be passed as props."))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Creating and Using Context"),a().createElement("div",{className:"bg-gray-100 p-4 rounded-lg text-sm font-mono mb-4"},"// 1. Create context\nconst ThemeContext = createContext(null);\n\n// 2. Provide context\nconst ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n  \n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// 3. Consume context\nconst ThemedButton = () => {\n  const { theme, setTheme } = useContext(ThemeContext);\n  // Use theme value here\n};")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Live Example"),a().createElement("div",{className:"space-y-4"},a().createElement("div",{className:"flex items-center justify-between"},a().createElement(i,null),a().createElement(u,null)))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Common Use Cases"),a().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},a().createElement("li",null,"Theme switching (dark/light mode)"),a().createElement("li",null,"User authentication state"),a().createElement("li",null,"Language/Locale preferences"),a().createElement("li",null,"UI state that affects multiple components"),a().createElement("li",null,"Feature flags and app configuration"))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Best Practices"),a().createElement("div",{className:"space-y-4"},a().createElement("div",{className:"bg-green-50 border-l-4 border-green-500 p-4"},a().createElement("p",{className:"text-green-700"},a().createElement("strong",null,"✅ Do:")),a().createElement("ul",{className:"list-disc list-inside mt-2 text-green-700"},a().createElement("li",null,"Keep context-specific state close to where it's being used"),a().createElement("li",null,"Split contexts by concern (theme, auth, etc.)"),a().createElement("li",null,"Provide meaningful default values"))),a().createElement("div",{className:"bg-red-50 border-l-4 border-red-500 p-4"},a().createElement("p",{className:"text-red-700"},a().createElement("strong",null,"❌ Don't:")),a().createElement("ul",{className:"list-disc list-inside mt-2 text-red-700"},a().createElement("li",null,"Use context for props that could be passed directly"),a().createElement("li",null,"Put everything in a single context"),a().createElement("li",null,"Nest too many context providers"))))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Performance Considerations"),a().createElement("div",{className:"bg-yellow-50 border-l-4 border-yellow-500 p-4"},a().createElement("p",{className:"text-yellow-700 mb-2"},a().createElement("strong",null,"⚠️ Context Re-renders:")),a().createElement("p",{className:"text-yellow-700"},"All components that use a particular context will re-render when that context's value changes. Consider splitting your context or using memoization if this becomes a performance issue.")),a().createElement("div",{className:"bg-gray-100 p-4 rounded-lg text-sm font-mono mt-4"},"// Splitting context example\nconst ThemeContext = createContext(null);\nconst ThemeActionsContext = createContext(null);\n\nconst ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n  \n  const actions = useMemo(() => ({\n    toggleTheme: () => setTheme(t => t === 'light' ? 'dark' : 'light')\n  }), []);\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      <ThemeActionsContext.Provider value={actions}>\n        {children}\n      </ThemeActionsContext.Provider>\n    </ThemeContext.Provider>\n  );\n};")),a().createElement("div",{className:"mt-12 flex justify-between items-center"},a().createElement(r.N_,{to:"/react-course/useEffect",className:"text-blue-600 hover:text-blue-800"},"← Previous"),a().createElement(r.N_,{to:"/react-course/useRef",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"},"Next →")))))}}}]);