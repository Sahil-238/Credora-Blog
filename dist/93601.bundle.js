"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[93601],{93601:(e,r,t)=>{t.r(r),t.d(r,{default:()=>a});var n=t(96540),l=t.n(n),s=t(71181),o=t(84976),i=t(42644);const a=()=>l().createElement(s.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},l().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"File System Module in Node.js"),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Introduction to fs Module"),l().createElement("p",{className:"text-gray-600 mb-4"},"The File System (fs) module is a core module in Node.js that provides an API for interacting with the file system. It allows you to work with files and directories, including reading, writing, updating, and deleting operations."),l().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},l().createElement("div",{className:"flex items-start"},l().createElement(i.UDU,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),l().createElement("div",null,l().createElement("h3",{className:"font-semibold mb-2"},"Key Features"),l().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},l().createElement("li",null,"Synchronous and asynchronous operations"),l().createElement("li",null,"File reading and writing"),l().createElement("li",null,"Directory operations"),l().createElement("li",null,"File information and stats"),l().createElement("li",null,"File watching and monitoring"),l().createElement("li",null,"Streams and pipes")))))),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Reading Files"),l().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},l().createElement("div",{className:"flex items-start"},l().createElement(i.QuH,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),l().createElement("div",null,l().createElement("p",{className:"text-gray-600 mb-4"},"There are multiple ways to read files in Node.js:"),l().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const fs = require('fs');\nconst fsPromises = require('fs').promises;\n\n// Asynchronous reading with callback\nfs.readFile('file.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error reading file:', err);\n    return;\n  }\n  console.log('File contents:', data);\n});\n\n// Synchronous reading\ntry {\n  const data = fs.readFileSync('file.txt', 'utf8');\n  console.log('File contents:', data);\n} catch (err) {\n  console.error('Error reading file:', err);\n}\n\n// Using Promises\nasync function readFileAsync() {\n  try {\n    const data = await fsPromises.readFile('file.txt', 'utf8');\n    console.log('File contents:', data);\n  } catch (err) {\n    console.error('Error reading file:', err);\n  }\n}\n\n// Reading with streams\nconst readStream = fs.createReadStream('file.txt', 'utf8');\n\nreadStream.on('data', (chunk) => {\n  console.log('Received chunk:', chunk);\n});\n\nreadStream.on('end', () => {\n  console.log('Finished reading file');\n});\n\nreadStream.on('error', (err) => {\n  console.error('Error reading file:', err);\n});"))))),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Writing Files"),l().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},l().createElement("div",{className:"flex items-start"},l().createElement(i.SG1,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),l().createElement("div",null,l().createElement("p",{className:"text-gray-600 mb-4"},"Different methods for writing to files:"),l().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const fs = require('fs');\nconst fsPromises = require('fs').promises;\n\n// Asynchronous writing\nfs.writeFile('output.txt', 'Hello World!', 'utf8', (err) => {\n  if (err) {\n    console.error('Error writing file:', err);\n    return;\n  }\n  console.log('File written successfully');\n});\n\n// Synchronous writing\ntry {\n  fs.writeFileSync('output.txt', 'Hello World!', 'utf8');\n  console.log('File written successfully');\n} catch (err) {\n  console.error('Error writing file:', err);\n}\n\n// Using Promises\nasync function writeFileAsync() {\n  try {\n    await fsPromises.writeFile('output.txt', 'Hello World!', 'utf8');\n    console.log('File written successfully');\n  } catch (err) {\n    console.error('Error writing file:', err);\n  }\n}\n\n// Writing with streams\nconst writeStream = fs.createWriteStream('output.txt');\n\nwriteStream.write('Hello');\nwriteStream.write(' World!');\nwriteStream.end();\n\nwriteStream.on('finish', () => {\n  console.log('Finished writing file');\n});\n\nwriteStream.on('error', (err) => {\n  console.error('Error writing file:', err);\n});\n\n// Appending to files\nfs.appendFile('output.txt', '\nNew line', (err) => {\n  if (err) {\n    console.error('Error appending to file:', err);\n    return;\n  }\n  console.log('Data appended to file');\n});"))))),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Directory Operations"),l().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},l().createElement("div",{className:"space-y-4"},l().createElement("div",null,l().createElement("h3",{className:"font-semibold mb-2"},"Creating and Removing Directories"),l().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"// Create directory\nfs.mkdir('new-directory', (err) => {\n  if (err) {\n    console.error('Error creating directory:', err);\n    return;\n  }\n  console.log('Directory created');\n});\n\n// Create nested directories\nfs.mkdir('path/to/new/directory', { recursive: true }, (err) => {\n  if (err) {\n    console.error('Error creating directories:', err);\n    return;\n  }\n  console.log('Directories created');\n});\n\n// Remove directory\nfs.rmdir('empty-directory', (err) => {\n  if (err) {\n    console.error('Error removing directory:', err);\n    return;\n  }\n  console.log('Directory removed');\n});\n\n// Remove directory and contents recursively\nfs.rm('directory', { recursive: true }, (err) => {\n  if (err) {\n    console.error('Error removing directory:', err);\n    return;\n  }\n  console.log('Directory and contents removed');\n});")),l().createElement("div",null,l().createElement("h3",{className:"font-semibold mb-2"},"Reading Directory Contents"),l().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"// Read directory contents\nfs.readdir('directory', (err, files) => {\n  if (err) {\n    console.error('Error reading directory:', err);\n    return;\n  }\n  console.log('Directory contents:', files);\n});\n\n// Read directory with file types\nfs.readdir('directory', { withFileTypes: true }, (err, files) => {\n  if (err) {\n    console.error('Error reading directory:', err);\n    return;\n  }\n  \n  files.forEach(file => {\n    if (file.isDirectory()) {\n      console.log('Directory:', file.name);\n    } else if (file.isFile()) {\n      console.log('File:', file.name);\n    }\n  });\n});"))))),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"File Information and Monitoring"),l().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},l().createElement("div",{className:"space-y-4"},l().createElement("div",null,l().createElement("h3",{className:"font-semibold mb-2"},"Getting File Information"),l().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"// Get file stats\nfs.stat('file.txt', (err, stats) => {\n  if (err) {\n    console.error('Error getting file stats:', err);\n    return;\n  }\n  \n  console.log('File size:', stats.size);\n  console.log('Is file:', stats.isFile());\n  console.log('Is directory:', stats.isDirectory());\n  console.log('Last modified:', stats.mtime);\n});\n\n// Check if file exists\nfs.access('file.txt', fs.constants.F_OK, (err) => {\n  console.log(`${err ? 'File does not exist' : 'File exists'}`);\n});\n\n// Check file permissions\nfs.access('file.txt', fs.constants.R_OK | fs.constants.W_OK, (err) => {\n  console.log(`${err ? 'No access' : 'File is readable/writable'}`);\n});")),l().createElement("div",null,l().createElement("h3",{className:"font-semibold mb-2"},"Watching Files and Directories"),l().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"// Watch file for changes\nfs.watch('file.txt', (eventType, filename) => {\n  console.log(`File ${filename} had event: ${eventType}`);\n});\n\n// Watch directory for changes\nfs.watch('directory', { recursive: true }, (eventType, filename) => {\n  console.log(`Directory change - Event: ${eventType}, File: ${filename}`);\n});"))))),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Best Practices"),l().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},l().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},l().createElement("li",null,"Use asynchronous methods for better performance"),l().createElement("li",null,"Handle errors appropriately"),l().createElement("li",null,"Use streams for large files"),l().createElement("li",null,"Close file handles when done"),l().createElement("li",null,"Check file permissions before operations"),l().createElement("li",null,"Use path module for cross-platform compatibility"),l().createElement("li",null,"Implement proper error recovery"),l().createElement("li",null,"Consider using promises for cleaner code")))),l().createElement("div",{className:"mt-12 flex justify-between items-center"},l().createElement(o.N_,{to:"/nodejs-course/http-module",className:"text-blue-600 hover:text-blue-800"},"‚Üê HTTP Module"),l().createElement(o.N_,{to:"/nodejs-course/path-module",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"},"Next: Path Module ‚Üí")))}}]);