"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[10315],{10315:(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});var a=n(96540),r=n.n(a),s=n(71181),l=n(84976),m=n(42644);const o=()=>r().createElement(s.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},r().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Streams in Node.js"),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Understanding Streams"),r().createElement("p",{className:"text-gray-600 mb-4"},"Streams are one of the fundamental concepts in Node.js. They provide a way to handle reading/writing data chunk by chunk, without loading the entire data into memory. This makes them perfect for handling large amounts of data efficiently."),r().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},r().createElement("div",{className:"flex items-start"},r().createElement(m.dyV,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),r().createElement("div",null,r().createElement("h3",{className:"font-semibold mb-2"},"Advantages of Streams"),r().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},r().createElement("li",null,"Memory efficiency - process data in chunks"),r().createElement("li",null,"Time efficiency - start processing data immediately"),r().createElement("li",null,"Composability - pipe data through multiple operations"),r().createElement("li",null,"Backpressure handling - automatic flow control")))))),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Types of Streams"),r().createElement("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-4"},r().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},r().createElement("h3",{className:"font-semibold mb-2"},"Readable Streams"),r().createElement("p",{className:"text-gray-600 mb-4"},"Streams from which data can be read (e.g., reading a file)"),r().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const fs = require('fs');\n\nconst readStream = fs.createReadStream('file.txt');\n\nreadStream.on('data', (chunk) => {\n  console.log('Received chunk:', chunk);\n});\n\nreadStream.on('end', () => {\n  console.log('Finished reading');\n});")),r().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},r().createElement("h3",{className:"font-semibold mb-2"},"Writable Streams"),r().createElement("p",{className:"text-gray-600 mb-4"},"Streams to which data can be written (e.g., writing to a file)"),r().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const fs = require('fs');\n\nconst writeStream = fs.createWriteStream('output.txt');\n\nwriteStream.write('Hello ');\nwriteStream.write('World!');\nwriteStream.end();\n\nwriteStream.on('finish', () => {\n  console.log('Finished writing');\n});"))),r().createElement("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4"},r().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},r().createElement("h3",{className:"font-semibold mb-2"},"Duplex Streams"),r().createElement("p",{className:"text-gray-600 mb-4"},"Streams that are both readable and writable (e.g., TCP sockets)"),r().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const net = require('net');\n\nconst server = net.createServer((socket) => {\n  // socket is a duplex stream\n  socket.write('Hello ');\n  socket.on('data', (data) => {\n    socket.write(data);\n  });\n});\n\nserver.listen(3000);")),r().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},r().createElement("h3",{className:"font-semibold mb-2"},"Transform Streams"),r().createElement("p",{className:"text-gray-600 mb-4"},"Duplex streams that can modify data as it's written and read"),r().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const { Transform } = require('stream');\n\nconst upperCaseTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    callback(null, chunk.toString().toUpperCase());\n  }\n});\n\nprocess.stdin\n  .pipe(upperCaseTransform)\n  .pipe(process.stdout);")))),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Stream Events"),r().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},r().createElement("div",{className:"flex items-start"},r().createElement(m.jEl,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),r().createElement("div",null,r().createElement("p",{className:"text-gray-600 mb-4"},"Streams emit various events that you can listen to:"),r().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const stream = fs.createReadStream('file.txt');\n\n// Data events\nstream.on('data', (chunk) => {\n  console.log('Received chunk:', chunk);\n});\n\n// End event\nstream.on('end', () => {\n  console.log('No more data');\n});\n\n// Error event\nstream.on('error', (err) => {\n  console.error('Error:', err);\n});\n\n// Ready event\nstream.on('ready', () => {\n  console.log('Stream is ready');\n});\n\n// Close event\nstream.on('close', () => {\n  console.log('Stream closed');\n});"))))),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Piping Streams"),r().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},r().createElement("div",{className:"flex items-start"},r().createElement(m.K7R,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),r().createElement("div",null,r().createElement("p",{className:"text-gray-600 mb-4"},"The pipe() method allows you to chain streams together:"),r().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const fs = require('fs');\nconst zlib = require('zlib');\n\n// Pipe chains for file compression\nfs.createReadStream('input.txt')\n  .pipe(zlib.createGzip())\n  .pipe(fs.createWriteStream('input.txt.gz'));\n\n// Error handling in pipes\nfs.createReadStream('input.txt')\n  .pipe(zlib.createGzip())\n  .pipe(fs.createWriteStream('input.txt.gz'))\n  .on('error', (err) => {\n    console.error('Pipeline failed:', err);\n  });\n\n// Using pipeline utility (recommended)\nconst { pipeline } = require('stream');\nconst util = require('util');\nconst pipelineAsync = util.promisify(pipeline);\n\nasync function compressFile() {\n  try {\n    await pipelineAsync(\n      fs.createReadStream('input.txt'),\n      zlib.createGzip(),\n      fs.createWriteStream('input.txt.gz')\n    );\n    console.log('Pipeline succeeded');\n  } catch (err) {\n    console.error('Pipeline failed:', err);\n  }\n}"))))),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Custom Streams"),r().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},r().createElement("p",{className:"text-gray-600 mb-4"},"You can create custom streams by extending the base stream classes:"),r().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const { Readable, Writable, Transform } = require('stream');\n\n// Custom Readable Stream\nclass CounterStream extends Readable {\n  constructor(max) {\n    super();\n    this.max = max;\n    this.counter = 0;\n  }\n\n  _read() {\n    this.counter++;\n    if (this.counter <= this.max) {\n      this.push(this.counter.toString());\n    } else {\n      this.push(null);\n    }\n  }\n}\n\n// Custom Transform Stream\nclass ReverseStream extends Transform {\n  _transform(chunk, encoding, callback) {\n    const reversed = chunk.toString()\n      .split('')\n      .reverse()\n      .join('');\n    callback(null, reversed);\n  }\n}\n\n// Usage\nconst counter = new CounterStream(3);\nconst reverser = new ReverseStream();\n\ncounter\n  .pipe(reverser)\n  .pipe(process.stdout);"))),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Best Practices"),r().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},r().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},r().createElement("li",null,"Use pipeline() instead of pipe() for better error handling"),r().createElement("li",null,"Always handle stream errors"),r().createElement("li",null,"Set appropriate highWaterMark values for performance"),r().createElement("li",null,"Use objectMode when streaming non-binary data"),r().createElement("li",null,"Implement backpressure handling in custom streams"),r().createElement("li",null,"Clean up resources by destroying streams when done")))),r().createElement("div",{className:"mt-12 flex justify-between items-center"},r().createElement(l.N_,{to:"/nodejs-course/buffers",className:"text-blue-600 hover:text-blue-800"},"← Buffers"),r().createElement(l.N_,{to:"/nodejs-course/error-handling",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"},"Next: Error Handling →")))}}]);