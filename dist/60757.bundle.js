"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[60757],{60757:(e,t,l)=>{l.r(t),l.d(t,{default:()=>o});var a=l(96540),n=l.n(a),s=l(71181),c=l(84976);const m=(0,a.memo)((e=>{let{onCalculate:t,value:l}=e;return console.log("ExpensiveCalculation rendered"),n().createElement("div",{className:"p-4 bg-gray-50 rounded"},n().createElement("p",{className:"text-gray-600 mb-2"},"Value: ",l),n().createElement("button",{onClick:()=>t(l),className:"bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600"},"Calculate"))})),r=(0,a.memo)((e=>{let{items:t,onItemClick:l}=e;return console.log("ItemList rendered"),n().createElement("ul",{className:"space-y-2"},t.map((e=>n().createElement("li",{key:e.id,onClick:()=>l(e.id),className:"p-3 bg-gray-50 rounded cursor-pointer hover:bg-gray-100"},e.text))))})),o=()=>{const[e,t]=(0,a.useState)(0),[l,o]=(0,a.useState)(42),[i]=(0,a.useState)([{id:1,text:"Item 1"},{id:2,text:"Item 2"},{id:3,text:"Item 3"}]),d=(0,a.useCallback)((e=>(console.log("Calculating...",e),2*e)),[]),u=(0,a.useCallback)((e=>{console.log("Item clicked:",e),t((e=>e+1))}),[]);return n().createElement(s.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},n().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"useCallback Hook"),n().createElement("section",{className:"mb-8"},n().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"What is useCallback?"),n().createElement("p",{className:"text-gray-600 mb-4"},"useCallback is a Hook that returns a memoized version of a callback function. The memoized function only changes if one of its dependencies changes. This is useful when:"),n().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2 mb-4"},n().createElement("li",null,"Passing callbacks to optimized child components that rely on reference equality"),n().createElement("li",null,"Preventing unnecessary re-renders in child components"),n().createElement("li",null,"Memoizing functions that are used in useEffect dependencies")),n().createElement("div",{className:"bg-pink-50 border-l-4 border-pink-500 p-4 mb-6"},n().createElement("p",{className:"text-pink-700"},n().createElement("strong",null,"Best Practice:")," Only use useCallback when passing callbacks to optimized components that rely on reference equality to prevent unnecessary renders."))),n().createElement("section",{className:"mb-8"},n().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Basic Example"),n().createElement("div",{className:"bg-white shadow-md rounded-lg p-6 mb-4"},n().createElement("div",{className:"space-y-4"},n().createElement("p",{className:"text-gray-600"},"Count: ",e),n().createElement("div",{className:"space-x-2"},n().createElement("button",{onClick:()=>t((e=>e+1)),className:"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"},"Increment Count"),n().createElement("button",{onClick:()=>o((e=>e+1)),className:"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"},"Change Value")),n().createElement("div",{className:"grid grid-cols-2 gap-4"},n().createElement("div",null,n().createElement("h3",{className:"font-semibold mb-2"},"Without useCallback"),n().createElement(m,{value:l,onCalculate:e=>(console.log("Calculating...",e),2*e)})),n().createElement("div",null,n().createElement("h3",{className:"font-semibold mb-2"},"With useCallback"),n().createElement(m,{value:l,onCalculate:d}))))),n().createElement("div",{className:"bg-gray-100 p-4 rounded-lg text-sm font-mono mb-4"},"// Without useCallback\nconst handleCalculate = (val) => {\n  console.log('Calculating...', val);\n  return val * 2;\n};\n\n// With useCallback\nconst handleCalculate = useCallback((val) => {\n  console.log('Calculating...', val);\n  return val * 2;\n}, []); // Empty deps array = function never changes")),n().createElement("section",{className:"mb-8"},n().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Real-World Example: Item List"),n().createElement("div",{className:"bg-white shadow-md rounded-lg p-6 mb-4"},n().createElement("p",{className:"text-gray-600 mb-4"},"Items clicked: ",e),n().createElement(r,{items:i,onItemClick:u})),n().createElement("div",{className:"bg-gray-100 p-4 rounded-lg text-sm font-mono mb-4"},"const ItemList = memo(({ items, onItemClick }) => {\n  return (\n    <ul>\n      {items.map(item => (\n        <li key={item.id} onClick={() => onItemClick(item.id)}>\n          {item.text}\n        </li>\n      ))}\n    </ul>\n  );\n});\n\nconst handleItemClick = useCallback((id) => {\n  console.log('Item clicked:', id);\n  setCount(c => c + 1);\n}, []); // Add dependencies if needed")),n().createElement("section",{className:"mb-8"},n().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"When to Use useCallback"),n().createElement("div",{className:"space-y-4"},n().createElement("div",{className:"bg-green-50 border-l-4 border-green-500 p-4"},n().createElement("p",{className:"text-green-700"},n().createElement("strong",null,"✅ Use when:")),n().createElement("ul",{className:"list-disc list-inside mt-2 text-green-700"},n().createElement("li",null,"Passing callbacks to memoized child components"),n().createElement("li",null,"Callbacks are used in useEffect dependencies"),n().createElement("li",null,"Callbacks are expensive to create"))),n().createElement("div",{className:"bg-red-50 border-l-4 border-red-500 p-4"},n().createElement("p",{className:"text-red-700"},n().createElement("strong",null,"❌ Don't use when:")),n().createElement("ul",{className:"list-disc list-inside mt-2 text-red-700"},n().createElement("li",null,"Passing callbacks to regular components"),n().createElement("li",null,"The function is only used in render"),n().createElement("li",null,"The function is simple and cheap to create"))))),n().createElement("section",{className:"mb-8"},n().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Common Patterns"),n().createElement("div",{className:"space-y-4"},n().createElement("div",{className:"bg-yellow-50 border-l-4 border-yellow-500 p-4"},n().createElement("p",{className:"text-yellow-700"},n().createElement("strong",null,"⚠️ Dependencies Matter:")),n().createElement("div",{className:"bg-yellow-100 p-2 rounded mt-2 text-sm font-mono"},"// Recreated when a or b changes\nconst callback = useCallback(() => {\n  console.log(a + b);\n}, [a, b]);\n\n// Never changes\nconst callback = useCallback(() => {\n  console.log('Hello');\n}, []);\n\n// Changes on every render (usually a mistake)\nconst callback = useCallback(() => {\n  console.log('Hello');\n});")))),n().createElement("section",{className:"mb-8"},n().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Best Practices"),n().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},n().createElement("li",null,"Always define dependencies array"),n().createElement("li",null,"Use with memo() for optimal performance"),n().createElement("li",null,"Consider if you really need memoization"),n().createElement("li",null,"Keep dependencies array as small as possible"),n().createElement("li",null,"Use ESLint hooks plugin to catch mistakes"))),n().createElement("div",{className:"mt-12 flex justify-between items-center"},n().createElement(c.N_,{to:"/react-course/useReducer",className:"text-blue-600 hover:text-blue-800"},"← Previous"),n().createElement(c.N_,{to:"/react-course/useMemo",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"},"Next →")))}}}]);