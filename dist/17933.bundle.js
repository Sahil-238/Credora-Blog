"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[17933],{17933:(e,t,a)=>{a.r(t),a.d(t,{default:()=>i});var n=a(96540),r=a.n(n),l=a(71181),s=a(84976);function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){m(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t,a){return(t=function(e){var t=function(e){if("object"!=typeof e||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var a=t.call(e,"string");if("object"!=typeof a)return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}const i=()=>{const[e,t]=(0,n.useState)(0),[a,o]=(0,n.useState)({name:"",email:""}),m=e=>{const{name:t,value:a}=e.target;o((e=>c(c({},e),{},{[t]:a})))};return r().createElement(l.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},r().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"useState Hook"),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"What is useState?"),r().createElement("p",{className:"text-gray-600 mb-4"},"The useState hook is your primary tool for managing state in functional components. It returns an array with two elements:"),r().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2 mb-4"},r().createElement("li",null,"The current state value"),r().createElement("li",null,"A function to update that value")),r().createElement("div",{className:"bg-pink-50 border-l-4 border-pink-500 p-4 mb-6"},r().createElement("p",{className:"text-pink-700"},r().createElement("strong",null,"Best Practice:")," Always use the setter function from useState to update state, never modify state directly."))),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Basic Counter Example"),r().createElement("div",{className:"bg-white shadow-md rounded-lg p-6 mb-4"},r().createElement("p",{className:"text-gray-600 mb-4"},"Count: ",e),r().createElement("div",{className:"space-x-2"},r().createElement("button",{onClick:()=>t((e=>e-1)),className:"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"},"Decrease"),r().createElement("button",{onClick:()=>t((e=>e+1)),className:"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"},"Increase"))),r().createElement("div",{className:"bg-gray-100 p-4 rounded-lg text-sm font-mono mb-4"},"const [count, setCount] = useState(0);\n\n// Using previous state\nconst increment = () => setCount(prev => prev + 1);\nconst decrement = () => setCount(prev => prev - 1);")),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Managing Object State"),r().createElement("div",{className:"bg-white shadow-md rounded-lg p-6 mb-4"},r().createElement("form",{className:"space-y-4"},r().createElement("div",null,r().createElement("label",{className:"block text-gray-700 mb-2"},"Name:"),r().createElement("input",{type:"text",name:"name",value:a.name,onChange:m,className:"w-full px-4 py-2 border rounded focus:outline-none focus:border-blue-500"})),r().createElement("div",null,r().createElement("label",{className:"block text-gray-700 mb-2"},"Email:"),r().createElement("input",{type:"email",name:"email",value:a.email,onChange:m,className:"w-full px-4 py-2 border rounded focus:outline-none focus:border-blue-500"}))),r().createElement("div",{className:"mt-4"},r().createElement("p",{className:"text-gray-600"},"Current State:"),r().createElement("pre",{className:"bg-gray-100 p-2 rounded mt-2"},JSON.stringify(a,null,2)))),r().createElement("div",{className:"bg-gray-100 p-4 rounded-lg text-sm font-mono mb-4"},"const [formData, setFormData] = useState({\n  name: '',\n  email: ''\n});\n\nconst handleInputChange = (e) => {\n  const { name, value } = e.target;\n  setFormData(prev => ({\n    ...prev,\n    [name]: value\n  }));\n};")),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Key Points to Remember"),r().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},r().createElement("li",null,"Always use the setter function to update state"),r().createElement("li",null,"Use the functional update form (prev => ...) when new state depends on previous state"),r().createElement("li",null,"State updates are asynchronous"),r().createElement("li",null,"For objects and arrays, make sure to spread the previous state when updating"),r().createElement("li",null,"Initialize state with useState only once during component mount"))),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Common Pitfalls"),r().createElement("div",{className:"space-y-4"},r().createElement("div",{className:"bg-red-50 border-l-4 border-red-500 p-4"},r().createElement("p",{className:"text-red-700"},r().createElement("strong",null,"❌ Don't modify state directly:")),r().createElement("pre",{className:"bg-red-100 p-2 rounded mt-2 text-sm"},"// Wrong\nformData.name = 'John';  // This won't trigger re-render\n\n// Correct\nsetFormData(prev => ({ ...prev, name: 'John' }));")),r().createElement("div",{className:"bg-green-50 border-l-4 border-green-500 p-4"},r().createElement("p",{className:"text-green-700"},r().createElement("strong",null,"✅ Use functional updates for state that depends on previous value:")),r().createElement("pre",{className:"bg-green-100 p-2 rounded mt-2 text-sm"},"// Wrong\nsetCount(count + 1);  // May lead to race conditions\n\n// Correct\nsetCount(prev => prev + 1);  // Always uses latest state")))),r().createElement("div",{className:"mt-12 flex justify-between items-center"},r().createElement(s.N_,{to:"/react-course/hooks-intro",className:"text-blue-600 hover:text-blue-800"},"← Previous"),r().createElement(s.N_,{to:"/react-course/useEffect",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"},"Next →")))}}}]);