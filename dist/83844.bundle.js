"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[83844],{83844:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});var r=n(96540),s=n.n(r),a=n(71181),l=n(84976),o=n(42644);const m=()=>s().createElement(a.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},s().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"HTTP Module in Node.js"),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Introduction to HTTP Module"),s().createElement("p",{className:"text-gray-600 mb-4"},"The HTTP module is a core module in Node.js that allows you to create web servers and make HTTP requests. It provides the foundation for handling HTTP communications and is the basis for many higher-level modules like Express.js."),s().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},s().createElement("div",{className:"flex items-start"},s().createElement(o.LIi,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),s().createElement("div",null,s().createElement("h3",{className:"font-semibold mb-2"},"Key Features"),s().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},s().createElement("li",null,"Create HTTP servers"),s().createElement("li",null,"Handle HTTP requests and responses"),s().createElement("li",null,"Make HTTP client requests"),s().createElement("li",null,"Support for HTTPS"),s().createElement("li",null,"Stream-based data handling")))))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Creating an HTTP Server"),s().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},s().createElement("div",{className:"flex items-start"},s().createElement(o.VeH,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),s().createElement("div",null,s().createElement("p",{className:"text-gray-600 mb-4"},"Create a basic HTTP server that listens for incoming requests:"),s().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const http = require('http');\n\n// Create a basic server\nconst server = http.createServer((req, res) => {\n  // Set response headers\n  res.writeHead(200, {\n    'Content-Type': 'text/plain'\n  });\n  \n  // Send response\n  res.end('Hello from Node.js Server!');\n});\n\n// Listen on port 3000\nserver.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});\n\n// Handle server errors\nserver.on('error', (err) => {\n  console.error('Server error:', err);\n});\n\n// Handle incoming connections\nserver.on('connection', (socket) => {\n  console.log('New connection from', socket.remoteAddress);\n});"))))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Handling HTTP Requests"),s().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},s().createElement("div",{className:"flex items-start"},s().createElement(o.kGk,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),s().createElement("div",null,s().createElement("p",{className:"text-gray-600 mb-4"},"Handle different types of HTTP requests and route them appropriately:"),s().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const http = require('http');\nconst url = require('url');\n\nconst server = http.createServer((req, res) => {\n  // Parse the request URL\n  const parsedUrl = url.parse(req.url, true);\n  const path = parsedUrl.pathname;\n  const method = req.method;\n\n  // Set default headers\n  res.setHeader('Content-Type', 'application/json');\n\n  // Route handling\n  if (path === '/api/users' && method === 'GET') {\n    // Handle GET request\n    res.writeHead(200);\n    res.end(JSON.stringify({ users: ['John', 'Jane'] }));\n  }\n  else if (path === '/api/users' && method === 'POST') {\n    // Handle POST request\n    let body = '';\n    \n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      const user = JSON.parse(body);\n      // Process the user data\n      res.writeHead(201);\n      res.end(JSON.stringify({ message: 'User created' }));\n    });\n  }\n  else {\n    // Handle 404\n    res.writeHead(404);\n    res.end(JSON.stringify({ error: 'Not found' }));\n  }\n});\n\nserver.listen(3000);"))))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Making HTTP Requests"),s().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},s().createElement("div",{className:"flex items-start"},s().createElement(o.VSk,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),s().createElement("div",null,s().createElement("p",{className:"text-gray-600 mb-4"},"Use the HTTP module to make requests to other servers:"),s().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const http = require('http');\nconst https = require('https');\n\n// Make a GET request\nhttp.get('http://api.example.com/data', (res) => {\n  let data = '';\n\n  // Receive data in chunks\n  res.on('data', (chunk) => {\n    data += chunk;\n  });\n\n  // Process the complete response\n  res.on('end', () => {\n    console.log(JSON.parse(data));\n  });\n}).on('error', (err) => {\n  console.error('Error:', err.message);\n});\n\n// Make a POST request\nconst options = {\n  hostname: 'api.example.com',\n  port: 443,\n  path: '/users',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer token123'\n  }\n};\n\nconst req = https.request(options, (res) => {\n  let data = '';\n\n  res.on('data', (chunk) => {\n    data += chunk;\n  });\n\n  res.on('end', () => {\n    console.log(JSON.parse(data));\n  });\n});\n\nreq.on('error', (err) => {\n  console.error('Error:', err.message);\n});\n\n// Write request body\nreq.write(JSON.stringify({\n  name: 'John Doe',\n  email: 'john@example.com'\n}));\n\nreq.end();"))))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Working with HTTPS"),s().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},s().createElement("p",{className:"text-gray-600 mb-4"},"Create an HTTPS server with SSL/TLS encryption:"),s().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('private-key.pem'),\n  cert: fs.readFileSync('certificate.pem')\n};\n\nconst server = https.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('Secure hello from HTTPS server!');\n});\n\nserver.listen(443, () => {\n  console.log('HTTPS server running on port 443');\n});"))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Advanced Features"),s().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm space-y-4"},s().createElement("div",null,s().createElement("h3",{className:"font-semibold mb-2"},"Request Streaming"),s().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const server = http.createServer((req, res) => {\n  if (req.method === 'POST') {\n    const fileStream = fs.createWriteStream('uploaded-file.txt');\n    \n    req.pipe(fileStream);\n\n    req.on('end', () => {\n      res.end('File uploaded successfully');\n    });\n  }\n});")),s().createElement("div",null,s().createElement("h3",{className:"font-semibold mb-2"},"Proxy Server"),s().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const server = http.createServer((req, res) => {\n  const options = {\n    hostname: 'api.example.com',\n    port: 80,\n    path: req.url,\n    method: req.method,\n    headers: req.headers\n  };\n\n  const proxyReq = http.request(options, (proxyRes) => {\n    res.writeHead(proxyRes.statusCode, proxyRes.headers);\n    proxyRes.pipe(res);\n  });\n\n  req.pipe(proxyReq);\n});")))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Best Practices"),s().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},s().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},s().createElement("li",null,"Always handle errors in both server and client operations"),s().createElement("li",null,"Set appropriate headers for content type and encoding"),s().createElement("li",null,"Use HTTPS for secure communications"),s().createElement("li",null,"Implement proper request timeout handling"),s().createElement("li",null,"Consider using streams for large data transfers"),s().createElement("li",null,"Implement proper error status codes"),s().createElement("li",null,"Use compression when appropriate"),s().createElement("li",null,"Implement proper security headers")))),s().createElement("div",{className:"mt-12 flex justify-between items-center"},s().createElement(l.N_,{to:"/nodejs-course/error-handling",className:"text-blue-600 hover:text-blue-800"},"← Error Handling"),s().createElement(l.N_,{to:"/nodejs-course/fs-module",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"},"Next: File System Module →")))}}]);