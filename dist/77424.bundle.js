"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[77424],{77424:(e,n,t)=>{t.r(n),t.d(n,{default:()=>p});var a=t(96540),r=t.n(a),s=t(71181),l=t(84976),o=t(42644),i=t(58027),m=t(90956);const p=()=>r().createElement(s.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},r().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Props in React"),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"What are Props?"),r().createElement("p",{className:"text-gray-600 mb-4"},'Props (short for "properties") are the mechanism for passing data from parent to child components in React. They are read-only and help make your components reusable.'),r().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-4"},r().createElement("p",{className:"text-blue-700"},"Props are immutable - a component should never modify its own props. This helps maintain the one-way data flow that makes React apps predictable and easier to debug.")),r().createElement(i.A,{language:"jsx",style:m.A,className:"rounded-lg"},'// Parent Component\nfunction App() {\n  return (\n    <div>\n      <Welcome name="John" age={25} isAdmin={true} />\n    </div>\n  );\n}\n\n// Child Component\nfunction Welcome(props) {\n  return (\n    <div>\n      <h1>Hello, {props.name}!</h1>\n      <p>Age: {props.age}</p>\n      {props.isAdmin && <p>Admin Access Granted</p>}\n    </div>\n  );\n}')),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Props Destructuring"),r().createElement("p",{className:"text-gray-600 mb-4"},"Props can be destructured directly in the function parameters, making the code cleaner and more readable. You can also specify default values during destructuring."),r().createElement(i.A,{language:"jsx",style:m.A,className:"rounded-lg"},'// Props Destructuring\nfunction UserProfile({ name, age, email, isVerified = false }) {\n  return (\n    <div>\n      <h2>{name}</h2>\n      <p>Age: {age}</p>\n      <p>Email: {email}</p>\n      {isVerified && <span>âœ“ Verified</span>}\n    </div>\n  );\n}\n\n// Usage\n<UserProfile\n  name="John Doe"\n  age={25}\n  email="john@example.com"\n/>')),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"PropTypes and Default Props"),r().createElement("p",{className:"text-gray-600 mb-4"},"PropTypes provide a way to validate the props being passed to a component. While optional, they're very useful for debugging and documenting your components."),r().createElement(i.A,{language:"jsx",style:m.A,className:"rounded-lg"},"import PropTypes from 'prop-types';\n\nfunction User({ name, age, email, friends }) {\n  return (\n    <div>\n      <h2>{name}</h2>\n      <p>Age: {age}</p>\n      <p>Email: {email}</p>\n      <p>Friends: {friends.length}</p>\n    </div>\n  );\n}\n\nUser.propTypes = {\n  name: PropTypes.string.isRequired,\n  age: PropTypes.number,\n  email: PropTypes.string.isRequired,\n  friends: PropTypes.arrayOf(PropTypes.string)\n};\n\nUser.defaultProps = {\n  age: 0,\n  friends: []\n};")),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"The Children Prop"),r().createElement("p",{className:"text-gray-600 mb-4"},"The children prop is a special prop that lets you pass components as data to other components, enabling component composition."),r().createElement(i.A,{language:"jsx",style:m.A,className:"rounded-lg"},'// Button Component with children prop\nfunction Button({ children, type = "primary" }) {\n  return (\n    <button className={`btn btn-${type}`}>\n      {children}\n    </button>\n  );\n}\n\n// Usage\n<Button type="success">\n  Click Me!\n</Button>\n\n// Card Component with multiple children\nfunction Card({ title, children }) {\n  return (\n    <div className="card">\n      <h3>{title}</h3>\n      <div className="card-content">\n        {children}\n      </div>\n    </div>\n  );\n}\n\n// Usage\n<Card title="Welcome">\n  <p>This is the main content.</p>\n  <Button>Learn More</Button>\n</Card>')),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Spreading Props"),r().createElement("p",{className:"text-gray-600 mb-4"},"The spread operator can be used to pass all properties of an object as props, or to collect remaining props after destructuring."),r().createElement(i.A,{language:"jsx",style:m.A,className:"rounded-lg"},'// Component with many props\nfunction UserCard({ name, age, email, location, ...otherProps }) {\n  return (\n    <div {...otherProps}>\n      <h2>{name}</h2>\n      <p>Age: {age}</p>\n      <p>Email: {email}</p>\n      <p>Location: {location}</p>\n    </div>\n  );\n}\n\n// Usage with spread operator\nconst userProps = {\n  name: "John Doe",\n  age: 25,\n  email: "john@example.com",\n  location: "New York",\n  className: "user-card",\n  id: "user-1"\n};\n\n<UserCard {...userProps} />')),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Props Best Practices"),r().createElement("div",{className:"bg-white shadow-md rounded-lg p-6"},r().createElement("ul",{className:"list-disc list-inside space-y-3 text-gray-600"},r().createElement("li",null,"Always use prop-types or TypeScript for props validation"),r().createElement("li",null,"Keep props as simple as possible"),r().createElement("li",null,"Use descriptive prop names"),r().createElement("li",null,"Provide default values for optional props"),r().createElement("li",null,"Don't modify props inside a component"),r().createElement("li",null,"Use the spread operator judiciously"),r().createElement("li",null,"Document your props with comments or TypeScript")))),r().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-8"},r().createElement("h3",{className:"text-lg font-semibold text-blue-800 mb-2"},"Pro Tips"),r().createElement("ul",{className:"list-disc list-inside space-y-2 text-blue-700"},r().createElement("li",null,"Consider using TypeScript for better props type safety"),r().createElement("li",null,"Use compound components pattern for complex component APIs"),r().createElement("li",null,"Avoid passing too many props (prop drilling)"),r().createElement("li",null,"Consider using Context API for deeply nested props"))),r().createElement("div",{className:"mt-12 flex justify-between items-center"},r().createElement(l.N_,{to:"/react-course/components",className:"text-blue-600 hover:text-blue-800 flex items-center"},r().createElement(o.aze,{className:"mr-2"})," Previous: Components"),r().createElement(l.N_,{to:"/react-course/state",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center"},"Next: State ",r().createElement(o.PjK,{className:"ml-2"}))))}}]);