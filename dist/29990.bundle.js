"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[29990],{29990:(e,n,t)=>{t.r(n),t.d(n,{default:()=>m});var a=t(96540),o=t.n(a),s=t(71181),l=t(84976),r=t(42644),c=t(58027),i=t(90956);const m=()=>o().createElement(s.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},o().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Component Lifecycle in React"),o().createElement("section",{className:"mb-8"},o().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Understanding the Component Lifecycle"),o().createElement("p",{className:"text-gray-600 mb-4"},"Every React component goes through a series of phases during its existence: mounting, updating, and unmounting. Understanding these phases is crucial for managing side effects and optimizing performance."),o().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-4"},o().createElement("p",{className:"text-blue-700"},"While class components have explicit lifecycle methods, functional components achieve the same functionality through the useEffect Hook."))),o().createElement("section",{className:"mb-8"},o().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Class Component Lifecycle"),o().createElement("p",{className:"text-gray-600 mb-4"},"Class components have several lifecycle methods that are called in a specific order during mounting, updating, and unmounting phases."),o().createElement(c.A,{language:"jsx",style:i.A,className:"rounded-lg"},"// Class Component Lifecycle\nclass ExampleComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n    console.log('1. Constructor - Component is initialized');\n  }\n\n  componentDidMount() {\n    console.log('3. ComponentDidMount - Component is mounted to DOM');\n    // Good place for API calls, subscriptions\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('4. ComponentDidUpdate - Component is updated');\n    if (prevState.count !== this.state.count) {\n      console.log('Count changed');\n    }\n  }\n\n  componentWillUnmount() {\n    console.log('5. ComponentWillUnmount - Component is about to be removed');\n    // Clean up subscriptions, timers\n  }\n\n  render() {\n    console.log('2. Render - Component is being rendered');\n    return (\n      <div>Count: {this.state.count}</div>\n    );\n  }\n}")),o().createElement("section",{className:"mb-8"},o().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Functional Component Lifecycle"),o().createElement("p",{className:"text-gray-600 mb-4"},"Functional components use the useEffect Hook to handle lifecycle events. This provides a more streamlined way to manage side effects."),o().createElement(c.A,{language:"jsx",style:i.A,className:"rounded-lg"},"// Functional Component with Hooks\nimport React, { useState, useEffect } from 'react';\n\nfunction ExampleComponent() {\n  const [count, setCount] = useState(0);\n  console.log('1. Component rendering');\n\n  // Similar to componentDidMount and componentDidUpdate\n  useEffect(() => {\n    console.log('2. After render - Component mounted or updated');\n    \n    // Similar to componentWillUnmount\n    return () => {\n      console.log('4. Cleanup - Component will unmount');\n    };\n  }, [count]); // Only run if count changes\n\n  return (\n    <div>Count: {count}</div>\n  );\n}")),o().createElement("section",{className:"mb-8"},o().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Mounting Phase"),o().createElement("p",{className:"text-gray-600 mb-4"},"The mounting phase occurs when a component is being created and inserted into the DOM. This is where initial setup should occur."),o().createElement(c.A,{language:"jsx",style:i.A,className:"rounded-lg"},"// Mounting Phase Example\nfunction MountingExample() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    // ComponentDidMount equivalent\n    console.log('Component mounted');\n    fetchData();\n\n    return () => {\n      // ComponentWillUnmount equivalent\n      console.log('Component will unmount');\n      // Cleanup code here\n    };\n  }, []); // Empty dependency array = run once on mount\n\n  const fetchData = async () => {\n    const result = await fetch('https://api.example.com/data');\n    const json = await result.json();\n    setData(json);\n  };\n\n  return (\n    <div>{data ? 'Data loaded' : 'Loading...'}</div>\n  );\n}")),o().createElement("section",{className:"mb-8"},o().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Update Phase"),o().createElement("p",{className:"text-gray-600 mb-4"},"The update phase occurs when a component's props or state change. This is where you handle changes and side effects."),o().createElement(c.A,{language:"jsx",style:i.A,className:"rounded-lg"},"// Update Phase Example\nfunction UpdateExample({ id }) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Runs when id changes\n    console.log('ID changed, fetching new data');\n    setLoading(true);\n    \n    fetchData(id).then(result => {\n      setData(result);\n      setLoading(false);\n    });\n  }, [id]); // Dependency on id prop\n\n  // Runs on every render\n  useEffect(() => {\n    console.log('Component rendered');\n  });\n\n  return (\n    <div>\n      {loading ? 'Loading...' : data}\n    </div>\n  );\n}")),o().createElement("section",{className:"mb-8"},o().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Error Handling"),o().createElement("p",{className:"text-gray-600 mb-4"},"Error boundaries are special components that catch JavaScript errors in their child component tree and display a fallback UI."),o().createElement(c.A,{language:"jsx",style:i.A,className:"rounded-lg"},"// Error Boundary Component\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log('Error caught:', error);\n    console.log('Error info:', errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\n// Usage\n<ErrorBoundary>\n  <MyComponent />\n</ErrorBoundary>")),o().createElement("section",{className:"mb-8"},o().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Lifecycle Best Practices"),o().createElement("div",{className:"bg-white shadow-md rounded-lg p-6"},o().createElement("ul",{className:"list-disc list-inside space-y-3 text-gray-600"},o().createElement("li",null,"Clean up subscriptions and event listeners in unmount phase"),o().createElement("li",null,"Use dependency arrays in useEffect properly"),o().createElement("li",null,"Avoid infinite update loops"),o().createElement("li",null,"Keep side effects organized and focused"),o().createElement("li",null,"Use error boundaries for graceful error handling"),o().createElement("li",null,"Consider performance implications in update phase"),o().createElement("li",null,"Use appropriate lifecycle methods for data fetching")))),o().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-8"},o().createElement("h3",{className:"text-lg font-semibold text-blue-800 mb-2"},"Pro Tips"),o().createElement("ul",{className:"list-disc list-inside space-y-2 text-blue-700"},o().createElement("li",null,"Use useEffect cleanup to prevent memory leaks"),o().createElement("li",null,"Consider using useCallback for memoized event handlers"),o().createElement("li",null,"Implement error boundaries at appropriate levels"),o().createElement("li",null,"Use React DevTools to debug lifecycle issues"))),o().createElement("div",{className:"mt-12 flex justify-between items-center"},o().createElement(l.N_,{to:"/react-course/events",className:"text-blue-600 hover:text-blue-800 flex items-center"},o().createElement(r.aze,{className:"mr-2"})," Previous: Events"),o().createElement(l.N_,{to:"/react-course/hooks",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center"},"Next: Hooks ",o().createElement(r.PjK,{className:"ml-2"}))))}}]);