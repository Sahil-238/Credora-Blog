"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[39013],{39013:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});var s=n(96540),a=n.n(s),r=n(71181),o=n(84976),i=n(42644),l=n(58027),c=n(90956);const m=()=>a().createElement(r.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},a().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Testing React Applications"),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Understanding Testing"),a().createElement("p",{className:"text-gray-600 mb-4"},"Testing is crucial for building reliable React applications. Different testing approaches help ensure your application works as expected at various levels."),a().createElement("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-4"},a().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},a().createElement(i.A3x,{className:"text-2xl text-blue-600 mb-2"}),a().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Unit Tests"),a().createElement("p",{className:"text-gray-600"},"Test individual components")),a().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},a().createElement(i.x_j,{className:"text-2xl text-blue-600 mb-2"}),a().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Integration Tests"),a().createElement("p",{className:"text-gray-600"},"Test component interactions")),a().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},a().createElement(i.PjK,{className:"text-2xl text-blue-600 mb-2"}),a().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"E2E Tests"),a().createElement("p",{className:"text-gray-600"},"Test full user flows")))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Jest and React Testing Library"),a().createElement("p",{className:"text-gray-600 mb-4"},"Jest combined with React Testing Library provides a powerful testing solution focused on testing components the way users interact with them."),a().createElement(l.A,{language:"jsx",style:c.A,className:"rounded-lg"},"// Jest + React Testing Library example\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Counter from './Counter';\n\ndescribe('Counter component', () => {\n  test('renders initial count', () => {\n    render(<Counter initialCount={0} />);\n    expect(screen.getByText(/count: 0/i)).toBeInTheDocument();\n  });\n\n  test('increments count when button is clicked', () => {\n    render(<Counter initialCount={0} />);\n    const button = screen.getByRole('button', { name: /increment/i });\n    fireEvent.click(button);\n    expect(screen.getByText(/count: 1/i)).toBeInTheDocument();\n  });\n\n  test('handles user interactions correctly', async () => {\n    const user = userEvent.setup();\n    render(<Counter initialCount={0} />);\n    \n    const button = screen.getByRole('button', { name: /increment/i });\n    await user.click(button);\n    await user.click(button);\n    \n    expect(screen.getByText(/count: 2/i)).toBeInTheDocument();\n  });\n});\n\n// Testing async operations\ntest('loads and displays user data', async () => {\n  render(<UserProfile userId=\"123\" />);\n\n  // Check loading state\n  expect(screen.getByText(/loading/i)).toBeInTheDocument();\n\n  // Wait for data to load\n  const userName = await screen.findByText(/john doe/i);\n  expect(userName).toBeInTheDocument();\n});\n\n// Testing error states\ntest('handles error states', async () => {\n  server.use(\n    rest.get('/api/user/:id', (req, res, ctx) => {\n      return res(ctx.status(500));\n    })\n  );\n\n  render(<UserProfile userId=\"123\" />);\n  const error = await screen.findByText(/error/i);\n  expect(error).toBeInTheDocument();\n});")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Cypress"),a().createElement("p",{className:"text-gray-600 mb-4"},"Cypress is a modern end-to-end testing framework that makes it easy to set up, write, run and debug tests."),a().createElement(l.A,{language:"jsx",style:c.A,className:"rounded-lg"},"// Cypress E2E testing\ndescribe('Todo App', () => {\n  beforeEach(() => {\n    cy.visit('/');\n  });\n\n  it('adds a new todo', () => {\n    cy.get('[data-testid=\"todo-input\"]')\n      .type('Learn Cypress{enter}');\n\n    cy.get('[data-testid=\"todo-list\"]')\n      .should('contain', 'Learn Cypress');\n  });\n\n  it('completes a todo', () => {\n    // Add a todo\n    cy.get('[data-testid=\"todo-input\"]')\n      .type('Learn Cypress{enter}');\n\n    // Complete it\n    cy.get('[data-testid=\"todo-item\"]')\n      .first()\n      .find('[data-testid=\"todo-checkbox\"]')\n      .click();\n\n    // Verify it's completed\n    cy.get('[data-testid=\"todo-item\"]')\n      .first()\n      .should('have.class', 'completed');\n  });\n\n  it('filters todos', () => {\n    // Add todos\n    const todos = ['Learn Cypress', 'Write tests'];\n    todos.forEach(todo => {\n      cy.get('[data-testid=\"todo-input\"]')\n        .type(`${todo}{enter}`);\n    });\n\n    // Complete first todo\n    cy.get('[data-testid=\"todo-item\"]')\n      .first()\n      .find('[data-testid=\"todo-checkbox\"]')\n      .click();\n\n    // Filter by active\n    cy.get('[data-testid=\"filter-active\"]').click();\n    cy.get('[data-testid=\"todo-list\"]')\n      .should('have.length', 1)\n      .and('contain', 'Write tests');\n\n    // Filter by completed\n    cy.get('[data-testid=\"filter-completed\"]').click();\n    cy.get('[data-testid=\"todo-list\"]')\n      .should('have.length', 1)\n      .and('contain', 'Learn Cypress');\n  });\n});\n\n// Custom commands\nCypress.Commands.add('login', (email, password) => {\n  cy.visit('/login');\n  cy.get('[data-testid=\"email-input\"]').type(email);\n  cy.get('[data-testid=\"password-input\"]').type(password);\n  cy.get('[data-testid=\"login-button\"]').click();\n});\n\n// Using custom command\nit('logs in and views dashboard', () => {\n  cy.login('user@example.com', 'password123');\n  cy.url().should('include', '/dashboard');\n  cy.get('[data-testid=\"welcome-message\"]')\n    .should('contain', 'Welcome back');\n});")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Testing Library Best Practices"),a().createElement("p",{className:"text-gray-600 mb-4"},"React Testing Library encourages testing your components in a way that resembles how users interact with your app."),a().createElement(l.A,{language:"jsx",style:c.A,className:"rounded-lg"},"// React Testing Library examples\nimport { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\n// Testing form submission\ntest('submits form with user data', async () => {\n  const user = userEvent.setup();\n  const handleSubmit = jest.fn();\n\n  render(\n    <UserForm onSubmit={handleSubmit} />\n  );\n\n  await user.type(\n    screen.getByLabelText(/name/i),\n    'John Doe'\n  );\n  await user.type(\n    screen.getByLabelText(/email/i),\n    'john@example.com'\n  );\n  await user.click(\n    screen.getByRole('button', { name: /submit/i })\n  );\n\n  expect(handleSubmit).toHaveBeenCalledWith({\n    name: 'John Doe',\n    email: 'john@example.com'\n  });\n});\n\n// Testing routing\ntest('navigates to about page', async () => {\n  const user = userEvent.setup();\n\n  render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  );\n\n  await user.click(\n    screen.getByRole('link', { name: /about/i })\n  );\n\n  expect(screen.getByText(/about us/i))\n    .toBeInTheDocument();\n});\n\n// Testing async data fetching\ntest('displays fetched data', async () => {\n  render(<UserList />);\n\n  // Initial loading state\n  expect(screen.getByText(/loading/i))\n    .toBeInTheDocument();\n\n  // Wait for data to load\n  await waitFor(() => {\n    expect(screen.getByText(/john doe/i))\n      .toBeInTheDocument();\n  });\n\n  // Check if all users are displayed\n  expect(screen.getAllByRole('listitem'))\n    .toHaveLength(3);\n});\n\n// Testing error boundaries\ntest('renders error boundary fallback', async () => {\n  const ThrowError = () => {\n    throw new Error('Test error');\n  };\n\n  render(\n    <ErrorBoundary fallback={<div>Error occurred</div>}>\n      <ThrowError />\n    </ErrorBoundary>\n  );\n\n  expect(screen.getByText(/error occurred/i))\n    .toBeInTheDocument();\n});")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Mocking"),a().createElement("p",{className:"text-gray-600 mb-4"},"Effective mocking strategies are essential for isolating components and testing them independently."),a().createElement(l.A,{language:"jsx",style:c.A,className:"rounded-lg"},"// Mocking examples\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\n\n// Mock server setup\nconst server = setupServer(\n  rest.get('/api/users', (req, res, ctx) => {\n    return res(\n      ctx.json([\n        { id: 1, name: 'John Doe' },\n        { id: 2, name: 'Jane Smith' }\n      ])\n    );\n  }),\n\n  rest.post('/api/users', (req, res, ctx) => {\n    const { name } = req.body;\n    return res(\n      ctx.json({ id: Date.now(), name })\n    );\n  })\n);\n\nbeforeAll(() => server.listen());\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n\n// Testing with mocked API\ntest('loads and displays users', async () => {\n  render(<UserList />);\n\n  const users = await screen.findAllByRole('listitem');\n  expect(users).toHaveLength(2);\n  expect(users[0]).toHaveTextContent('John Doe');\n});\n\n// Mock module\njest.mock('./api', () => ({\n  fetchUser: jest.fn()\n    .mockResolvedValue({ id: 1, name: 'John' })\n}));\n\n// Mock timer\njest.useFakeTimers();\n\ntest('updates after delay', () => {\n  render(<DelayedComponent />);\n  \n  jest.advanceTimersByTime(1000);\n  \n  expect(screen.getByText(/updated/i))\n    .toBeInTheDocument();\n});\n\n// Mock window methods\nconst mockScrollTo = jest.fn();\nObject.defineProperty(window, 'scrollTo', {\n  value: mockScrollTo\n});\n\ntest('scrolls to top', () => {\n  render(<ScrollButton />);\n  fireEvent.click(screen.getByRole('button'));\n  expect(mockScrollTo).toHaveBeenCalledWith(0, 0);\n});")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Testing Best Practices"),a().createElement("div",{className:"bg-white shadow-md rounded-lg p-6"},a().createElement("ul",{className:"list-disc list-inside space-y-3 text-gray-600"},a().createElement("li",null,"Test behavior, not implementation"),a().createElement("li",null,"Write maintainable tests"),a().createElement("li",null,"Use meaningful assertions"),a().createElement("li",null,"Follow the testing pyramid"),a().createElement("li",null,"Mock external dependencies"),a().createElement("li",null,"Test error cases"),a().createElement("li",null,"Keep tests focused")))),a().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-8"},a().createElement("h3",{className:"text-lg font-semibold text-blue-800 mb-2"},"Pro Tips"),a().createElement("ul",{className:"list-disc list-inside space-y-2 text-blue-700"},a().createElement("li",null,"Use testing-library queries appropriately"),a().createElement("li",null,"Implement continuous integration"),a().createElement("li",null,"Monitor test coverage"),a().createElement("li",null,"Write testable code"))),a().createElement("div",{className:"mt-12 flex justify-between items-center"},a().createElement(o.N_,{to:"/react-course/state-management",className:"text-blue-600 hover:text-blue-800 flex items-center"},a().createElement(i.PjK,{className:"mr-2"})," Previous: State Management"),a().createElement(o.N_,{to:"/react-course/deployment",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center"},"Next: Deployment ",a().createElement(i.PjK,{className:"ml-2"}))))}}]);