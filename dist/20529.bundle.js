"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[20529],{20529:(e,t,a)=>{a.r(t),a.d(t,{default:()=>i});var n=a(96540),l=a.n(n),s=a(71181),c=a(84976),r=a(42644),m=a(58027),o=a(90956);const i=()=>l().createElement(s.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},l().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"JSX in React"),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"What is JSX?"),l().createElement("p",{className:"text-gray-600 mb-4"},"JSX (JavaScript XML) is a syntax extension for JavaScript that allows you to write HTML-like code within your JavaScript code. It makes React code more readable and writing templates more intuitive."),l().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-4"},l().createElement("p",{className:"text-blue-700"},"JSX is not required for using React, but it makes the code more readable and writing templates more intuitive.")),l().createElement(m.A,{language:"jsx",style:o.A,className:"rounded-lg"},'// JSX Example\nconst element = (\n  <div className="greeting">\n    <h1>Hello, {name}!</h1>\n    <p>Welcome to React</p>\n  </div>\n);')),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"JSX vs Raw React"),l().createElement("p",{className:"text-gray-600 mb-4"},"Under the hood, JSX is converted to regular JavaScript. Each JSX element is converted to a React.createElement() call."),l().createElement(m.A,{language:"jsx",style:o.A,className:"rounded-lg"},"// With JSX\nconst element = (\n  <h1 className=\"greeting\">\n    Hello, World!\n  </h1>\n);\n\n// Without JSX (Raw React)\nconst element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, World!'\n);")),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Embedding Expressions in JSX"),l().createElement("p",{className:"text-gray-600 mb-4"},"You can embed any valid JavaScript expression inside JSX by wrapping it in curly braces ","."),l().createElement(m.A,{language:"jsx",style:o.A,className:"rounded-lg"},"const name = 'John';\nconst age = 25;\n\nfunction formatName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nconst element = (\n  <div>\n    <h1>Hello, {name}!</h1>\n    <p>Age: {age}</p>\n    <p>2 + 2 = {2 + 2}</p>\n    <p>Name: {formatName({firstName: 'John', lastName: 'Doe'})}</p>\n  </div>\n);")),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"JSX Attributes"),l().createElement("p",{className:"text-gray-600 mb-4"},"You can use both string literals and JavaScript expressions as JSX attributes."),l().createElement("div",{className:"bg-yellow-50 border-l-4 border-yellow-500 p-4 my-4"},l().createElement("p",{className:"text-yellow-800"},"Note: React DOM uses camelCase property naming convention. For example, class becomes className in JSX, and tabindex becomes tabIndex.")),l().createElement(m.A,{language:"jsx",style:o.A,className:"rounded-lg"},"// String Literals\nconst element = <div className=\"container\">Hello</div>;\n\n// JavaScript Expressions\nconst buttonText = \"Click Me\";\nconst element = <button className={isActive ? 'active' : 'inactive'}>{buttonText}</button>;\n\n// Spread Attributes\nconst props = { firstName: 'John', lastName: 'Doe' };\nconst element = <Greeting {...props} />;")),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Children in JSX"),l().createElement("p",{className:"text-gray-600 mb-4"},"JSX elements can contain children, just like HTML elements. This allows you to nest components and elements."),l().createElement(m.A,{language:"jsx",style:o.A,className:"rounded-lg"},"// Single Line\nconst element = <img src={user.avatarUrl} />;\n\n// Multiple Lines\nconst element = (\n  <div>\n    <h1>Hello!</h1>\n    <h2>Good to see you here.</h2>\n  </div>\n);\n\n// Children with JavaScript Expressions\nconst todos = ['Learn JSX', 'Practice React', 'Build Projects'];\nconst element = (\n  <ul>\n    {todos.map((todo, index) => (\n      <li key={index}>{todo}</li>\n    ))}\n  </ul>\n);")),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"JSX Best Practices"),l().createElement("div",{className:"bg-white shadow-md rounded-lg p-6"},l().createElement("ul",{className:"list-disc list-inside space-y-3 text-gray-600"},l().createElement("li",null,"Always close all tags (including self-closing tags like ",l().createElement("code",{className:"bg-gray-100 px-2 py-1 rounded"},"<img />"),")"),l().createElement("li",null,"Use className instead of class for CSS classes"),l().createElement("li",null,"Wrap multi-line JSX in parentheses to avoid automatic semicolon insertion"),l().createElement("li",null,"Use camelCase for event handlers and other props (onClick, onSubmit, etc.)"),l().createElement("li",null,"Keep JSX expressions simple, extract complex logic into separate functions"),l().createElement("li",null,"Use meaningful component and variable names")))),l().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-8"},l().createElement("h3",{className:"text-lg font-semibold text-blue-800 mb-2"},"Pro Tips"),l().createElement("ul",{className:"list-disc list-inside space-y-2 text-blue-700"},l().createElement("li",null,"Use fragments (",l().createElement("code",{className:"bg-blue-100 px-2 py-1 rounded"},"<></>"),") to avoid unnecessary div wrappers"),l().createElement("li",null,"Install ESLint and the React plugin for better JSX code quality"),l().createElement("li",null,"Use prettier for consistent JSX formatting"))),l().createElement("div",{className:"mt-12 flex justify-between items-center"},l().createElement(c.N_,{to:"/react-course/create-react-app",className:"text-blue-600 hover:text-blue-800 flex items-center"},l().createElement(r.aze,{className:"mr-2"})," Previous: Create React App"),l().createElement(c.N_,{to:"/react-course/components",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center"},"Next: Components ",l().createElement(r.PjK,{className:"ml-2"}))))}}]);