"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[98483],{82355:(e,t,a)=>{a.d(t,{A:()=>l});const l={hljs:{display:"block",overflowX:"auto",padding:"0.5em",color:"#abb2bf",background:"#282c34"},"hljs-comment":{color:"#5c6370",fontStyle:"italic"},"hljs-quote":{color:"#5c6370",fontStyle:"italic"},"hljs-doctag":{color:"#c678dd"},"hljs-keyword":{color:"#c678dd"},"hljs-formula":{color:"#c678dd"},"hljs-section":{color:"#e06c75"},"hljs-name":{color:"#e06c75"},"hljs-selector-tag":{color:"#e06c75"},"hljs-deletion":{color:"#e06c75"},"hljs-subst":{color:"#e06c75"},"hljs-literal":{color:"#56b6c2"},"hljs-string":{color:"#98c379"},"hljs-regexp":{color:"#98c379"},"hljs-addition":{color:"#98c379"},"hljs-attribute":{color:"#98c379"},"hljs-meta-string":{color:"#98c379"},"hljs-built_in":{color:"#e6c07b"},"hljs-class .hljs-title":{color:"#e6c07b"},"hljs-attr":{color:"#d19a66"},"hljs-variable":{color:"#d19a66"},"hljs-template-variable":{color:"#d19a66"},"hljs-type":{color:"#d19a66"},"hljs-selector-class":{color:"#d19a66"},"hljs-selector-attr":{color:"#d19a66"},"hljs-selector-pseudo":{color:"#d19a66"},"hljs-number":{color:"#d19a66"},"hljs-symbol":{color:"#61aeee"},"hljs-bullet":{color:"#61aeee"},"hljs-link":{color:"#61aeee",textDecoration:"underline"},"hljs-meta":{color:"#61aeee"},"hljs-selector-id":{color:"#61aeee"},"hljs-title":{color:"#61aeee"},"hljs-emphasis":{fontStyle:"italic"},"hljs-strong":{fontWeight:"bold"}}},98483:(e,t,a)=>{a.r(t),a.d(t,{default:()=>i});var l=a(96540),s=a.n(l),o=a(71181),n=a(84976),r=a(58027),c=a(82355);const i=()=>s().createElement(o.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},s().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Zustand"),s().createElement("section",{className:"mb-10"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"What is Zustand?"),s().createElement("p",{className:"text-gray-600 mb-4"},"Zustand is a small, fast, and scalable state management library for React. Unlike Redux, it doesn't require context providers or reducers. Zustand simplifies global state management by using hooks and direct function-based stores."),s().createElement("div",{className:"bg-yellow-50 border-l-4 border-yellow-500 p-4 mb-6"},s().createElement("p",{className:"text-yellow-800"},s().createElement("strong",null,"Quick Facts:"),s().createElement("ul",{className:"list-disc list-inside mt-2"},s().createElement("li",null,"No boilerplate: just plain functions"),s().createElement("li",null,"No context provider needed"),s().createElement("li",null,"Supports middleware like persist and devtools"),s().createElement("li",null,"TypeScript support out of the box"))))),s().createElement("section",{className:"mb-10"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Creating a Store"),s().createElement("p",{className:"text-gray-600 mb-4"},"Zustand uses a ",s().createElement("code",null,"create")," function to define a store. This store is just a hook you can use anywhere in your React components. Here's a basic counter store:"),s().createElement("div",{className:"bg-gray-800 rounded-lg p-4 mb-6"},s().createElement(r.A,{language:"javascript",style:c.A},"// store.js\nimport create from 'zustand';\n\nconst useStore = create((set) => ({\n  count: 0,\n  increase: () => set((state) => ({ count: state.count + 1 })),\n  decrease: () => set((state) => ({ count: state.count - 1 })),\n}));"))),s().createElement("section",{className:"mb-10"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Using the Store in a Component"),s().createElement("p",{className:"text-gray-600 mb-4"},"To use the store, simply call the hook returned by Zustand. Here's how you can use the",s().createElement("code",null,"useStore")," in a functional component:"),s().createElement("div",{className:"bg-gray-800 rounded-lg p-4 mb-6"},s().createElement(r.A,{language:"javascript",style:c.A},"// CounterComponent.jsx\nimport React from 'react';\nimport useStore from './store';\n\nfunction CounterComponent() {\n  const { count, increase, decrease } = useStore();\n\n  return (\n    <div>\n      <h1>Count: {count}</h1>\n      <button onClick={increase}>Increment</button>\n      <button onClick={decrease}>Decrement</button>\n    </div>\n  );\n}\n\nexport default CounterComponent;")),s().createElement("p",{className:"text-gray-600 mb-4"},"This setup ensures the component re-renders only when the selected state changes.")),s().createElement("section",{className:"mb-10"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Advanced: Middleware (DevTools & Persistence)"),s().createElement("p",{className:"text-gray-600 mb-4"},"Zustand supports middlewares like Redux DevTools and persistent storage. Here's an example with both devtools and localStorage support using ",s().createElement("code",null,"persist"),":"),s().createElement("div",{className:"bg-gray-800 rounded-lg p-4 mb-6"},s().createElement(r.A,{language:"javascript",style:c.A},"// store.js with middleware\nimport create from 'zustand';\nimport { devtools, persist } from 'zustand/middleware';\n\nconst useStore = create(\n  persist(\n    devtools((set) => ({\n      count: 0,\n      increase: () => set((state) => ({ count: state.count + 1 })),\n      decrease: () => set((state) => ({ count: state.count - 1 })),\n    })),\n    {\n      name: 'counter-storage', // name in localStorage\n    }\n  )\n);")),s().createElement("p",{className:"text-gray-600"},s().createElement("strong",null,"Tip:")," Middleware can be chained for features like logging, caching, or debugging with minimal setup.")),s().createElement("section",{className:"mb-10"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"When to Use Zustand"),s().createElement("p",{className:"text-gray-600 mb-4"},"Zustand is ideal for small-to-medium apps, rapid prototyping, or any project where minimalism and speed matter. It’s also great for managing component-level shared state without needing context APIs."),s().createElement("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-6"},s().createElement("div",{className:"bg-white p-4 shadow rounded"},s().createElement("h3",{className:"font-medium mb-2"},"Use Zustand if:"),s().createElement("ul",{className:"list-disc list-inside text-gray-600"},s().createElement("li",null,"You want to avoid Redux boilerplate"),s().createElement("li",null,"You prefer hook-based APIs"),s().createElement("li",null,"You don’t need complex middleware setups"),s().createElement("li",null,"You need fast and scalable local state management"))))),s().createElement("div",{className:"mt-12 flex justify-between items-center"},s().createElement(n.N_,{to:"/react-course/redux-toolkit",className:"text-blue-600 hover:text-blue-800"},"← Redux Toolkit"),s().createElement(n.N_,{to:"/react-course/recoil",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"},"Next: Recoil →")))}}]);