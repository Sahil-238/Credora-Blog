"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[11709],{11709:(e,n,t)=>{t.r(n),t.d(n,{default:()=>i});var a=t(12198),r=t(96540),l=t.n(r),c=t(71181),s=t(15235),o=t(90956);const i=()=>l().createElement(c.P.div,{initial:{opacity:0},animate:{opacity:1},transition:{duration:.5},className:"max-w-4xl mx-auto"},l().createElement("h1",{className:"text-4xl font-bold mb-6"},"JavaScript Closures"),l().createElement("div",{className:"bg-blue-50 p-6 rounded-xl mb-8"},l().createElement("h2",{className:"text-2xl font-semibold mb-4"},"Understanding Closures"),l().createElement("p",{className:"text-gray-700 mb-4"},"Learn about JavaScript closures, including lexical scoping, data privacy, and practical applications.")),l().createElement("div",{className:"space-y-8"},[{title:"Understanding Closures",content:"JavaScript closures provide:\n• Lexical scoping\n• Data privacy\n• State preservation\n• Function factories\n• Module patterns\n• Callback context\n• Memory management",code:"// Basic closure example\nfunction createCounter() {\n  let count = 0;  // Private variable\n  \n  return {\n    increment() {\n      return ++count;\n    },\n    decrement() {\n      return --count;\n    },\n    getCount() {\n      return count;\n    }\n  };\n}\n\nconst counter = createCounter();\nconsole.log(counter.increment());  // 1\nconsole.log(counter.increment());  // 2\nconsole.log(counter.getCount());   // 2\nconsole.log(counter.decrement());  // 1\n\n// count is not accessible directly\nconsole.log(counter.count);  // undefined"},{title:"Closure Patterns",content:"Common closure patterns:\n• Module pattern\n• Factory functions\n• Partial application\n• Currying\n• Memoization\n• Event handlers\n• Iterator pattern",code:"// Module pattern\nconst calculator = (function() {\n  // Private members\n  let result = 0;\n  \n  function validate(n) {\n    return typeof n === 'number';\n  }\n  \n  // Public API\n  return {\n    add(n) {\n      if (validate(n)) result += n;\n      return this;\n    },\n    subtract(n) {\n      if (validate(n)) result -= n;\n      return this;\n    },\n    getResult() {\n      return result;\n    }\n  };\n})();\n\n// Currying\nfunction curry(fn) {\n  return function curried(...args) {\n    if (args.length >= fn.length) {\n      return fn.apply(this, args);\n    }\n    return function(...moreArgs) {\n      return curried.apply(this, args.concat(moreArgs));\n    };\n  };\n}\n\n// Usage\nconst add = curry((a, b, c) => a + b + c);\nconsole.log(add(1)(2)(3));     // 6\nconsole.log(add(1, 2)(3));     // 6\nconsole.log(add(1)(2, 3));     // 6"},{title:"Practical Applications",content:"Closure applications:\n• Private variables\n• Event handling\n• Async operations\n• Caching/memoization\n• Function decoration\n• State management\n• API design",code:"// Memoization\nfunction memoize(fn) {\n  const cache = new Map();\n  \n  return function(...args) {\n    const key = JSON.stringify(args);\n    \n    if (cache.has(key)) {\n      console.log('Cache hit');\n      return cache.get(key);\n    }\n    \n    const result = fn.apply(this, args);\n    cache.set(key, result);\n    return result;\n  };\n}\n\n// Usage\nconst expensiveFunction = memoize((n) => {\n  console.log('Computing...');\n  return n * 2;\n});\n\nconsole.log(expensiveFunction(5));  // Computing... 10\nconsole.log(expensiveFunction(5));  // Cache hit 10\n\n// Event handling with closure\nfunction createButtonHandler(id) {\n  let clicks = 0;\n  \n  return function() {\n    clicks++;\n    console.log(`Button ${id} clicked ${clicks} times`);\n  };\n}\n\nconst handleClick = createButtonHandler('btn1');\n// Later in event listener\n// button.addEventListener('click', handleClick);"},{title:"Advanced Patterns",content:"Advanced closure patterns:\n• Composition\n• Middleware\n• Decorators\n• Generators\n• Async patterns\n• Error handling\n• Memory optimization",code:"// Function composition\nconst compose = (...fns) => x =>\n  fns.reduceRight((v, f) => f(v), x);\n\nconst pipe = (...fns) => x =>\n  fns.reduce((v, f) => f(v), x);\n\n// Middleware pattern\nfunction createMiddleware() {\n  const middlewares = [];\n\n  return {\n    use(fn) {\n      middlewares.push(fn);\n    },\n    execute(input) {\n      return middlewares.reduce(\n        (promise, middleware) => promise.then(middleware),\n        Promise.resolve(input)\n      );\n    }\n  };\n}\n\n// Decorator pattern\nfunction readonly(target, key, descriptor) {\n  descriptor.writable = false;\n  return descriptor;\n}\n\nclass Example {\n  @readonly\n  pi() { return 3.14; }\n}\n\n// Generator with closure\nfunction* createIdGenerator() {\n  let id = 0;\n  while (true) {\n    yield `id_${id++}`;\n  }\n}"},{title:"Memory Management",content:"Closure memory considerations:\n• Memory leaks\n• Garbage collection\n• Circular references\n• Weak references\n• Performance impact\n• Cleanup strategies\n• Best practices",code:"// Memory leak example\nfunction createLeakyClosure() {\n  const largeData = new Array(1000000);\n  \n  return function() {\n    console.log(largeData.length);\n  };\n}\n\n// Better version with cleanup\nfunction createCleanClosure() {\n  let largeData = new Array(1000000);\n  \n  const closure = function() {\n    console.log(largeData.length);\n  };\n  \n  closure.cleanup = function() {\n    largeData = null;  // Allow GC\n  };\n  \n  return closure;\n}\n\n// WeakMap for private data\nconst privateData = new WeakMap();\n\nclass SafeClass {\n  constructor() {\n    privateData.set(this, {\n      data: new Array(1000000)\n    });\n  }\n  \n  doSomething() {\n    const data = privateData.get(this);\n    console.log(data.length);\n  }\n  \n  cleanup() {\n    privateData.delete(this);\n  }\n}"}].map(((e,n)=>l().createElement(c.P.div,{key:n,initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5,delay:.1*n},className:"border border-gray-200 rounded-xl p-6 hover:border-blue-500 transition-colors"},l().createElement("h2",{className:"text-2xl font-semibold mb-4"},e.title),l().createElement("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6"},l().createElement("div",null,l().createElement("p",{className:"text-gray-600 whitespace-pre-line mb-4"},e.content)),l().createElement("div",null,l().createElement(s.A,{language:"javascript",style:o.A,className:"rounded-lg"},e.code))))))),l().createElement("div",{className:"mt-12 bg-red-50 p-6 rounded-xl"},l().createElement("h3",{className:"text-xl font-semibold mb-4"},"Common Mistakes"),l().createElement("ul",{className:"space-y-3"},l().createElement("li",{className:"flex items-start"},l().createElement("span",{className:"text-red-600 mr-2"},"•"),l().createElement("p",{className:"text-gray-700"},"Creating memory leaks with unnecessary references")),l().createElement("li",{className:"flex items-start"},l().createElement("span",{className:"text-red-600 mr-2"},"•"),l().createElement("p",{className:"text-gray-700"},"Not cleaning up event listeners in closures")),l().createElement("li",{className:"flex items-start"},l().createElement("span",{className:"text-red-600 mr-2"},"•"),l().createElement("p",{className:"text-gray-700"},"Misunderstanding variable scope in loops")))),l().createElement("div",{className:"mt-12 bg-green-50 p-6 rounded-xl"},l().createElement("h3",{className:"text-xl font-semibold mb-4"},"Best Practices"),l().createElement("ul",{className:"space-y-3"},l().createElement("li",{className:"flex items-start"},l().createElement("span",{className:"text-green-600 mr-2"},"•"),l().createElement("p",{className:"text-gray-700"},"Implement cleanup methods for large data structures")),l().createElement("li",{className:"flex items-start"},l().createElement("span",{className:"text-green-600 mr-2"},"•"),l().createElement("p",{className:"text-gray-700"},"Use WeakMap/WeakSet for better memory management")),l().createElement("li",{className:"flex items-start"},l().createElement("span",{className:"text-green-600 mr-2"},"•"),l().createElement("p",{className:"text-gray-700"},"Keep closure scope as small as possible")))),l().createElement(a.default,null))}}]);