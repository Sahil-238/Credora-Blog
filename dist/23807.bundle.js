"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[23807],{23807:(e,t,a)=>{a.r(t),a.d(t,{default:()=>o});var n=a(96540),l=a.n(n),r=a(71181);const s=(0,n.lazy)((()=>new Promise((e=>{setTimeout((()=>{e({default:()=>l().createElement("div",{className:"p-4 bg-green-50 border border-green-200 rounded-lg"},l().createElement("h4",{className:"font-semibold text-green-800"},"Lazy Component Loaded!"),l().createElement("p",{className:"text-green-600"},"This component was loaded asynchronously."))})}),2e3)})))),o=()=>{const[e,t]=(0,n.useState)(!1);return l().createElement(r.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},l().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"React Suspense"),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"What is Suspense?"),l().createElement("p",{className:"text-gray-600 mb-4"},'React Suspense is a powerful feature that allows you to declaratively handle loading states for asynchronous operations. It lets you "suspend" component rendering while waiting for some asynchronous resource to load, such as code, data, or images.'),l().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-400 p-4 mb-4"},l().createElement("p",{className:"text-blue-800"},l().createElement("strong",null,"Key Concept:")," Suspense provides a way to handle loading states without manually managing loading flags in your component state."))),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Basic Syntax"),l().createElement("div",{className:"bg-gray-900 text-gray-100 p-4 rounded-lg mb-4 overflow-x-auto"},l().createElement("pre",{className:"text-sm"},"import React, { Suspense } from 'react';\nimport LazyComponent from './LazyComponent';\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <LazyComponent />\n    </Suspense>\n  );\n}")),l().createElement("p",{className:"text-gray-600"},"The ",l().createElement("code",{className:"bg-gray-100 px-2 py-1 rounded"},"fallback")," prop defines what to show while the suspended component is loading.")),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Common Use Cases"),l().createElement("div",{className:"grid md:grid-cols-2 gap-6 mb-6"},l().createElement("div",{className:"bg-white border border-gray-200 rounded-lg p-6"},l().createElement("h3",{className:"font-semibold text-gray-800 mb-3"},"1. Code Splitting"),l().createElement("p",{className:"text-gray-600 text-sm mb-3"},"Load components dynamically to reduce initial bundle size."),l().createElement("div",{className:"bg-gray-50 p-3 rounded text-xs"},l().createElement("code",null,"const LazyPage = lazy(() = import('./Page'))"))),l().createElement("div",{className:"bg-white border border-gray-200 rounded-lg p-6"},l().createElement("h3",{className:"font-semibold text-gray-800 mb-3"},"2. Data Fetching"),l().createElement("p",{className:"text-gray-600 text-sm mb-3"},"Handle loading states for data fetching operations."),l().createElement("div",{className:"bg-gray-50 p-3 rounded text-xs"},l().createElement("code",null,"Suspend while fetching user data..."))))),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Interactive Demo"),l().createElement("div",{className:"bg-white border border-gray-200 rounded-lg p-6"},l().createElement("button",{onClick:()=>t(!e),className:"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors mb-4"},e?"Hide":"Load"," Lazy Component"),e&&l().createElement(n.Suspense,{fallback:l().createElement("div",{className:"p-4 bg-yellow-50 border border-yellow-200 rounded-lg"},l().createElement("div",{className:"flex items-center"},l().createElement("div",{className:"animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-600 mr-3"}),l().createElement("span",{className:"text-yellow-800"},"Loading component...")))},l().createElement(s,null)))),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Error Boundaries with Suspense"),l().createElement("p",{className:"text-gray-600 mb-4"},"Suspense works well with Error Boundaries to handle both loading and error states:"),l().createElement("div",{className:"bg-gray-900 text-gray-100 p-4 rounded-lg mb-4 overflow-x-auto"},l().createElement("pre",{className:"text-sm"},"function App() {\n  return (\n    <ErrorBoundary fallback={<ErrorMessage />}>\n      <Suspense fallback={<LoadingSpinner />}>\n        <LazyComponent />\n      </Suspense>\n    </ErrorBoundary>\n  );\n}"))),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Best Practices"),l().createElement("div",{className:"space-y-4"},l().createElement("div",{className:"bg-green-50 border border-green-200 rounded-lg p-4"},l().createElement("h4",{className:"font-semibold text-green-800 mb-2"},"✅ Do:"),l().createElement("ul",{className:"text-green-700 text-sm space-y-1"},l().createElement("li",null,"• Use meaningful loading fallbacks"),l().createElement("li",null,"• Place Suspense boundaries at appropriate levels"),l().createElement("li",null,"• Combine with Error Boundaries for robust error handling"),l().createElement("li",null,"• Use React.lazy() for code splitting"))),l().createElement("div",{className:"bg-red-50 border border-red-200 rounded-lg p-4"},l().createElement("h4",{className:"font-semibold text-red-800 mb-2"},"❌ Don't:"),l().createElement("ul",{className:"text-red-700 text-sm space-y-1"},l().createElement("li",null,"• Wrap every component in Suspense unnecessarily"),l().createElement("li",null,"• Use Suspense for regular state management"),l().createElement("li",null,"• Ignore error handling in async operations"))))),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Advanced Example"),l().createElement("div",{className:"bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto"},l().createElement("pre",{className:"text-sm"},"// Multiple lazy components with nested Suspense\nconst HomePage = lazy(() => import('./pages/HomePage'));\nconst ProfilePage = lazy(() => import('./pages/ProfilePage'));\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={<AppSkeleton />}>\n        <Routes>\n          <Route path=\"/\" element={\n            <Suspense fallback={<PageSkeleton />}>\n              <HomePage />\n            </Suspense>\n          } />\n          <Route path=\"/profile\" element={\n            <Suspense fallback={<ProfileSkeleton />}>\n              <ProfilePage />\n            </Suspense>\n          } />\n        </Routes>\n      </Suspense>\n    </Router>\n  );\n}"))),l().createElement("section",{className:"mb-8"},l().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Key Takeaways"),l().createElement("div",{className:"bg-blue-50 border border-blue-200 rounded-lg p-6"},l().createElement("ul",{className:"text-blue-800 space-y-2"},l().createElement("li",null,"• Suspense simplifies handling of asynchronous operations"),l().createElement("li",null,"• Works seamlessly with React.lazy() for code splitting"),l().createElement("li",null,"• Provides declarative loading states without manual state management"),l().createElement("li",null,"• Can be nested for granular loading control"),l().createElement("li",null,"• Should be combined with Error Boundaries for complete error handling")))),l().createElement("div",{className:"mt-12 flex justify-between items-center"},l().createElement("button",{onClick:()=>window.history.back(),className:"text-blue-600 hover:text-blue-800 flex items-center px-4 py-2 rounded-lg border border-blue-200 hover:bg-blue-50 transition-colors"},"← Previous: Lazy Loading"),l().createElement("button",{onClick:()=>console.log("Navigate to Virtualization"),className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center"},"Next: Virtualization →")))}}}]);