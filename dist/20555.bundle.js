"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[20555],{20555:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});var a=n(96540),s=n.n(a),r=n(71181),o=n(84976),i=n(42644),l=n(58027),c=n(90956);const m=()=>s().createElement(r.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},s().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Basic Routing in React"),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Navigation Components"),s().createElement("p",{className:"text-gray-600 mb-4"},"React Router provides several components for handling navigation in your application. The most commonly used are Link and NavLink components."),s().createElement("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-4"},s().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},s().createElement(i.ayE,{className:"text-2xl text-blue-600 mb-2"}),s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Link"),s().createElement("p",{className:"text-gray-600"},"Basic navigation component")),s().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},s().createElement(i.ECz,{className:"text-2xl text-blue-600 mb-2"}),s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"NavLink"),s().createElement("p",{className:"text-gray-600"},"Active-aware navigation")),s().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},s().createElement(i.PjK,{className:"text-2xl text-blue-600 mb-2"}),s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Navigate"),s().createElement("p",{className:"text-gray-600"},"Programmatic navigation"))),s().createElement(l.A,{language:"jsx",style:c.A,className:"rounded-lg mt-4"},"// Using Link component\nimport { Link } from 'react-router-dom';\n\nfunction Navigation() {\n  return (\n    <nav>\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/about\">About</Link>\n      <Link to=\"/products\">Products</Link>\n    </nav>\n  );\n}\n\n// Using NavLink for active styles\nimport { NavLink } from 'react-router-dom';\n\nfunction Navigation() {\n  return (\n    <nav>\n      <NavLink\n        to=\"/\"\n        className={({ isActive }) =>\n          isActive ? 'active-link' : 'link'\n        }\n      >\n        Home\n      </NavLink>\n      <NavLink\n        to=\"/about\"\n        className={({ isActive }) =>\n          isActive ? 'active-link' : 'link'\n        }\n      >\n        About\n      </NavLink>\n    </nav>\n  );\n}")),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Programmatic Navigation"),s().createElement("p",{className:"text-gray-600 mb-4"},"Sometimes you need to navigate programmatically, such as after form submissions or based on certain conditions. The useNavigate hook provides this functionality."),s().createElement(l.A,{language:"jsx",style:c.A,className:"rounded-lg"},"// Using useNavigate hook\nimport { useNavigate } from 'react-router-dom';\n\nfunction LoginForm() {\n  const navigate = useNavigate();\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      await loginUser(formData);\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Login failed:', error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* form fields */}\n    </form>\n  );\n}\n\n// Navigation with state and replace\nfunction ProductPage() {\n  const navigate = useNavigate();\n\n  const handleDelete = async () => {\n    await deleteProduct(id);\n    navigate('/products', {\n      replace: true,\n      state: { message: 'Product deleted' }\n    });\n  };\n\n  return (\n    <button onClick={handleDelete}>\n      Delete Product\n    </button>\n  );\n}")),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Route Parameters"),s().createElement("p",{className:"text-gray-600 mb-4"},"React Router makes it easy to work with URL parameters and query strings using hooks like useParams and useSearchParams."),s().createElement(l.A,{language:"jsx",style:c.A,className:"rounded-lg"},"// Using URL Parameters\nimport { useParams, useSearchParams } from 'react-router-dom';\n\n// Route definition\n<Route path=\"/products/:id\" element={<ProductDetail />} />\n\n// Component using parameters\nfunction ProductDetail() {\n  const { id } = useParams();\n  const [searchParams] = useSearchParams();\n  const variant = searchParams.get('variant');\n\n  return (\n    <div>\n      <h1>Product {id}</h1>\n      {variant && <p>Variant: {variant}</p>}\n    </div>\n  );\n}\n\n// Optional parameters\n<Route path=\"/categories/:id?/products\" element={<ProductList />} />\n\nfunction ProductList() {\n  const { id } = useParams();\n  return (\n    <div>\n      {id ? (\n        <h1>Products in category {id}</h1>\n      ) : (\n        <h1>All Products</h1>\n      )}\n    </div>\n  );\n}")),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Location and History"),s().createElement("p",{className:"text-gray-600 mb-4"},"The useLocation hook provides access to the current location object, which contains information about the current URL and any state passed during navigation."),s().createElement(l.A,{language:"jsx",style:c.A,className:"rounded-lg"},"// Using location\nimport { useLocation } from 'react-router-dom';\n\nfunction ProductList() {\n  const location = useLocation();\n\n  React.useEffect(() => {\n    // Access location state\n    if (location.state?.message) {\n      showNotification(location.state.message);\n    }\n  }, [location]);\n\n  // Access query parameters\n  const searchParams = new URLSearchParams(location.search);\n  const category = searchParams.get('category');\n  const sort = searchParams.get('sort');\n\n  return (\n    <div>\n      <h1>Products</h1>\n      {category && <p>Category: {category}</p>}\n      {sort && <p>Sorted by: {sort}</p>}\n    </div>\n  );\n}")),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Routing Best Practices"),s().createElement("div",{className:"bg-white shadow-md rounded-lg p-6"},s().createElement("ul",{className:"list-disc list-inside space-y-3 text-gray-600"},s().createElement("li",null,"Use semantic URLs for better SEO"),s().createElement("li",null,"Handle loading and error states"),s().createElement("li",null,"Implement proper 404 handling"),s().createElement("li",null,"Use route constants"),s().createElement("li",null,"Implement proper navigation guards"),s().createElement("li",null,"Consider URL parameters for filters"),s().createElement("li",null,"Use proper route naming conventions")))),s().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-8"},s().createElement("h3",{className:"text-lg font-semibold text-blue-800 mb-2"},"Pro Tips"),s().createElement("ul",{className:"list-disc list-inside space-y-2 text-blue-700"},s().createElement("li",null,"Use relative paths when possible"),s().createElement("li",null,"Implement proper route transitions"),s().createElement("li",null,"Consider scroll restoration"),s().createElement("li",null,"Use route state for temporary data"))),s().createElement("div",{className:"mt-12 flex justify-between items-center"},s().createElement(o.N_,{to:"/react-course/router-setup",className:"text-blue-600 hover:text-blue-800 flex items-center"},s().createElement(i.PjK,{className:"mr-2"})," Previous: Router Setup"),s().createElement(o.N_,{to:"/react-course/advanced-routing",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center"},"Next: Advanced Routing ",s().createElement(i.PjK,{className:"ml-2"}))))}}]);