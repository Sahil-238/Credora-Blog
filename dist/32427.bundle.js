"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[32427],{32427:(e,n,t)=>{t.r(n),t.d(n,{default:()=>l});var a=t(12198),s=t(96540),r=t.n(s),c=t(71181),i=t(15235),o=t(90956);const l=()=>r().createElement(c.P.div,{initial:{opacity:0},animate:{opacity:1},transition:{duration:.5},className:"max-w-4xl mx-auto"},r().createElement("h1",{className:"text-4xl font-bold mb-6"},"JavaScript Testing"),r().createElement("div",{className:"bg-blue-50 p-6 rounded-xl mb-8"},r().createElement("h2",{className:"text-2xl font-semibold mb-4"},"Understanding Testing"),r().createElement("p",{className:"text-gray-700 mb-4"},"Learn about JavaScript testing, including unit testing, integration testing, test organization, and coverage analysis.")),r().createElement("div",{className:"space-y-8"},[{title:"Testing Basics",content:"JavaScript testing:\n• Unit testing\n• Integration testing\n• End-to-end testing\n• Test frameworks\n• Test runners\n• Assertions\n• Test coverage",code:"// Jest example\ndescribe('Calculator', () => {\n  let calculator;\n  \n  beforeEach(() => {\n    calculator = new Calculator();\n  });\n  \n  test('adds two numbers correctly', () => {\n    expect(calculator.add(2, 3)).toBe(5);\n  });\n  \n  test('subtracts two numbers correctly', () => {\n    expect(calculator.subtract(5, 2)).toBe(3);\n  });\n  \n  test('throws error for invalid input', () => {\n    expect(() => calculator.add('2', 3))\n      .toThrow('Invalid input');\n  });\n});\n\n// Mocha and Chai example\ndescribe('UserService', () => {\n  let userService;\n  \n  beforeEach(() => {\n    userService = new UserService();\n  });\n  \n  it('should create user with valid data', async () => {\n    const userData = {\n      name: 'John',\n      email: 'john@example.com'\n    };\n    \n    const user = await userService.createUser(userData);\n    \n    expect(user).to.have.property('id');\n    expect(user.name).to.equal(userData.name);\n    expect(user.email).to.equal(userData.email);\n  });\n});"},{title:"Test Organization",content:"Test organization:\n• Test suites\n• Test cases\n• Setup and teardown\n• Test fixtures\n• Test doubles\n• Test utilities\n• Test configuration",code:"// Test suite organization\ndescribe('Authentication', () => {\n  describe('Login', () => {\n    let authService;\n    let mockUserRepo;\n    \n    beforeAll(() => {\n      mockUserRepo = {\n        findByEmail: jest.fn()\n      };\n      authService = new AuthService(mockUserRepo);\n    });\n    \n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n    \n    it('should authenticate valid credentials', async () => {\n      const credentials = {\n        email: 'user@example.com',\n        password: 'password123'\n      };\n      \n      mockUserRepo.findByEmail.mockResolvedValue({\n        id: 1,\n        email: credentials.email,\n        password: await hash(credentials.password)\n      });\n      \n      const result = await authService.login(credentials);\n      \n      expect(result.success).toBe(true);\n      expect(result.token).toBeDefined();\n    });\n    \n    it('should reject invalid credentials', async () => {\n      const credentials = {\n        email: 'user@example.com',\n        password: 'wrongpassword'\n      };\n      \n      mockUserRepo.findByEmail.mockResolvedValue(null);\n      \n      const result = await authService.login(credentials);\n      \n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Invalid credentials');\n    });\n  });\n  \n  describe('Registration', () => {\n    // Registration tests\n  });\n});"},{title:"Mocking & Stubbing",content:"Test doubles:\n• Mocks\n• Stubs\n• Spies\n• Fakes\n• Dummies\n• Mock services\n• Mock data",code:"// Mock examples\ndescribe('PaymentService', () => {\n  let paymentService;\n  let mockStripeClient;\n  let mockLogger;\n  \n  beforeEach(() => {\n    mockStripeClient = {\n      charges: {\n        create: jest.fn()\n      }\n    };\n    \n    mockLogger = {\n      info: jest.fn(),\n      error: jest.fn()\n    };\n    \n    paymentService = new PaymentService(\n      mockStripeClient,\n      mockLogger\n    );\n  });\n  \n  it('should process payment successfully', async () => {\n    const paymentData = {\n      amount: 1000,\n      currency: 'USD',\n      source: 'tok_visa'\n    };\n    \n    mockStripeClient.charges.create\n      .mockResolvedValue({\n        id: 'ch_123',\n        status: 'succeeded'\n      });\n    \n    const result = await paymentService\n      .processPayment(paymentData);\n    \n    expect(result.success).toBe(true);\n    expect(result.chargeId).toBe('ch_123');\n    expect(mockLogger.info)\n      .toHaveBeenCalledWith(\n        expect.stringContaining('Payment processed')\n      );\n  });\n  \n  it('should handle payment failure', async () => {\n    const paymentData = {\n      amount: 1000,\n      currency: 'USD',\n      source: 'tok_chargeDeclined'\n    };\n    \n    mockStripeClient.charges.create\n      .mockRejectedValue(new Error('Card declined'));\n    \n    const result = await paymentService\n      .processPayment(paymentData);\n    \n    expect(result.success).toBe(false);\n    expect(result.error).toBe('Payment failed');\n    expect(mockLogger.error)\n      .toHaveBeenCalledWith(\n        expect.stringContaining('Card declined')\n      );\n  });\n});"},{title:"Integration Testing",content:"Integration tests:\n• API testing\n• Database testing\n• Service testing\n• Component testing\n• System testing\n• Contract testing\n• Performance testing",code:"// Supertest API testing\ndescribe('User API', () => {\n  let app;\n  let db;\n  \n  beforeAll(async () => {\n    db = await createTestDatabase();\n    app = createApp({ db });\n  });\n  \n  afterAll(async () => {\n    await db.close();\n  });\n  \n  beforeEach(async () => {\n    await db.clear();\n  });\n  \n  describe('POST /api/users', () => {\n    it('should create new user', async () => {\n      const userData = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        password: 'password123'\n      };\n      \n      const response = await request(app)\n        .post('/api/users')\n        .send(userData)\n        .expect(201);\n      \n      expect(response.body).toMatchObject({\n        id: expect.any(Number),\n        name: userData.name,\n        email: userData.email\n      });\n      \n      const user = await db.users.findById(response.body.id);\n      expect(user).toBeDefined();\n      expect(user.password).not.toBe(userData.password);\n    });\n    \n    it('should validate required fields', async () => {\n      const response = await request(app)\n        .post('/api/users')\n        .send({})\n        .expect(400);\n      \n      expect(response.body.errors).toEqual(\n        expect.arrayContaining([\n          expect.stringContaining('name is required'),\n          expect.stringContaining('email is required'),\n          expect.stringContaining('password is required')\n        ])\n      );\n    });\n  });\n});"},{title:"Test Coverage",content:"Coverage metrics:\n• Statement coverage\n• Branch coverage\n• Function coverage\n• Line coverage\n• Path coverage\n• Mutation testing\n• Code quality",code:"// Jest coverage configuration\nmodule.exports = {\n  collectCoverage: true,\n  coverageDirectory: 'coverage',\n  coverageReporters: ['text', 'lcov'],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    }\n  },\n  collectCoverageFrom: [\n    'src/**/*.{js,jsx}',\n    '!src/**/*.test.{js,jsx}',\n    '!src/index.js',\n    '!src/setupTests.js'\n  ]\n};\n\n// Mutation testing with Stryker\nmodule.exports = {\n  mutate: [\n    'src/**/*.js',\n    '!src/**/*.test.js'\n  ],\n  mutator: {\n    name: 'javascript',\n    excludedMutations: [\n      'StringLiteral',\n      'ObjectLiteral'\n    ]\n  },\n  reporters: ['clear-text', 'progress'],\n  testRunner: 'jest',\n  coverageAnalysis: 'perTest',\n  jest: {\n    projectType: 'custom',\n    config: require('./jest.config.js')\n  }\n};"}].map(((e,n)=>r().createElement(c.P.div,{key:n,initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5,delay:.1*n},className:"border border-gray-200 rounded-xl p-6 hover:border-blue-500 transition-colors"},r().createElement("h2",{className:"text-2xl font-semibold mb-4"},e.title),r().createElement("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6"},r().createElement("div",null,r().createElement("p",{className:"text-gray-600 whitespace-pre-line mb-4"},e.content)),r().createElement("div",null,r().createElement(i.A,{language:"javascript",style:o.A,className:"rounded-lg"},e.code))))))),r().createElement("div",{className:"mt-12 bg-red-50 p-6 rounded-xl"},r().createElement("h3",{className:"text-xl font-semibold mb-4"},"Common Mistakes"),r().createElement("ul",{className:"space-y-3"},r().createElement("li",{className:"flex items-start"},r().createElement("span",{className:"text-red-600 mr-2"},"•"),r().createElement("p",{className:"text-gray-700"},"Not cleaning up test data and mocks")),r().createElement("li",{className:"flex items-start"},r().createElement("span",{className:"text-red-600 mr-2"},"•"),r().createElement("p",{className:"text-gray-700"},"Testing implementation details instead of behavior")),r().createElement("li",{className:"flex items-start"},r().createElement("span",{className:"text-red-600 mr-2"},"•"),r().createElement("p",{className:"text-gray-700"},"Writing brittle tests that break easily")))),r().createElement("div",{className:"mt-12 bg-green-50 p-6 rounded-xl"},r().createElement("h3",{className:"text-xl font-semibold mb-4"},"Best Practices"),r().createElement("ul",{className:"space-y-3"},r().createElement("li",{className:"flex items-start"},r().createElement("span",{className:"text-green-600 mr-2"},"•"),r().createElement("p",{className:"text-gray-700"},"Write clear and descriptive test cases")),r().createElement("li",{className:"flex items-start"},r().createElement("span",{className:"text-green-600 mr-2"},"•"),r().createElement("p",{className:"text-gray-700"},"Follow the Arrange-Act-Assert pattern")),r().createElement("li",{className:"flex items-start"},r().createElement("span",{className:"text-green-600 mr-2"},"•"),r().createElement("p",{className:"text-gray-700"},"Maintain high test coverage")))),r().createElement(a.default,null))}}]);