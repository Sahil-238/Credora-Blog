"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[69874],{69874:(e,t,n)=>{n.r(t),n.d(t,{default:()=>d});var o=n(96540),a=n.n(o),s=n(71181),r=n(42644),i=n(15235),c=n(90956),l=n(12198);const d=()=>{const e=[{id:"todo",title:"Todo Application",icon:a().createElement(r.NLe,null),description:"Build a fully functional todo list application with CRUD operations and local storage.",features:["Add, edit, and delete todos","Mark todos as complete","Filter by status","Persist data in localStorage","Responsive design"],code:"// Todo Item Class\nclass TodoItem {\n  constructor(id, text, completed = false) {\n    this.id = id;\n    this.text = text;\n    this.completed = completed;\n  }\n}\n\n// Todo List Management\nclass TodoList {\n  constructor() {\n    this.todos = JSON.parse(localStorage.getItem('todos')) || [];\n  }\n\n  addTodo(text) {\n    const todo = new TodoItem(Date.now(), text);\n    this.todos.push(todo);\n    this.save();\n  }\n\n  toggleTodo(id) {\n    const todo = this.todos.find(t => t.id === id);\n    if (todo) {\n      todo.completed = !todo.completed;\n      this.save();\n    }\n  }\n\n  save() {\n    localStorage.setItem('todos', JSON.stringify(this.todos));\n  }\n}\n\n// UI Updates\nfunction renderTodos(todos) {\n  const todoList = document.querySelector('.todo-list');\n  todoList.innerHTML = todos\n    .map(todo => `\n      <li class=\"${todo.completed ? 'completed' : ''}\">\n        <input type=\"checkbox\" ${todo.completed ? 'checked' : ''}>\n        <span>${todo.text}</span>\n        <button class=\"delete\">×</button>\n      </li>\n    `).join('');\n}"},{id:"weather",title:"Weather Application",icon:a().createElement(r.Jqy,null),description:"Create a weather app that fetches and displays weather data from an API.",features:["Fetch weather data from API","Display current weather","Show 5-day forecast","Geolocation support","Weather icons and animations"],code:"// Weather API Integration\nconst API_KEY = 'your_api_key';\nconst BASE_URL = 'https://api.weatherapi.com/v1';\n\nasync function getWeather(city) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/forecast.json?key=${API_KEY}&q=${city}&days=5`\n    );\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching weather:', error);\n    throw error;\n  }\n}\n\n// Display Weather Data\nfunction displayWeather(data) {\n  const current = data.current;\n  document.querySelector('.temperature').textContent = \n    `${current.temp_c}°C`;\n  document.querySelector('.condition').textContent = \n    current.condition.text;\n  \n  // Display forecast\n  const forecast = data.forecast.forecastday\n    .map(day => `\n      <div class=\"forecast-day\">\n        <h3>${formatDate(day.date)}</h3>\n        <img src=\"${day.condition.icon}\">\n        <p>${day.day.avgtemp_c}°C</p>\n      </div>\n    `).join('');\n  \n  document.querySelector('.forecast').innerHTML = forecast;\n}"},{id:"quiz",title:"Quiz Application",icon:a().createElement(r.lrG,null),description:"Develop an interactive quiz application with multiple categories and scoring.",features:["Multiple choice questions","Score tracking","Timer functionality","Different categories","Results summary"],code:"// Quiz Management\nclass Quiz {\n  constructor(questions) {\n    this.questions = questions;\n    this.currentIndex = 0;\n    this.score = 0;\n    this.timer = null;\n  }\n\n  startQuiz() {\n    this.displayQuestion();\n    this.startTimer();\n  }\n\n  displayQuestion() {\n    const question = this.questions[this.currentIndex];\n    document.querySelector('.question').innerHTML = `\n      <h2>Question ${this.currentIndex + 1}</h2>\n      <p>${question.text}</p>\n      <div class=\"options\">\n        ${question.options.map((option, index) => `\n          <button onclick=\"quiz.checkAnswer(${index})\">\n            ${option}\n          </button>\n        `).join('')}\n      </div>\n    `;\n  }\n\n  checkAnswer(selectedIndex) {\n    const question = this.questions[this.currentIndex];\n    if (selectedIndex === question.correct) {\n      this.score++;\n    }\n    this.nextQuestion();\n  }\n\n  startTimer() {\n    let timeLeft = 30;\n    this.timer = setInterval(() => {\n      document.querySelector('.timer').textContent = \n        `Time: ${timeLeft}s`;\n      if (timeLeft === 0) this.nextQuestion();\n      timeLeft--;\n    }, 1000);\n  }\n}"},{id:"final",title:"Final Project",icon:a().createElement(r.TPq,null),description:"Build a full-stack JavaScript application combining all learned concepts.",features:["User authentication","Database integration","RESTful API","Real-time updates","Deployment"],code:"// Express Server Setup\nconst express = require('express');\nconst app = express();\nconst mongoose = require('mongoose');\n\n// MongoDB Connection\nmongoose.connect('mongodb://localhost/myapp', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\n// User Model\nconst userSchema = new mongoose.Schema({\n  username: String,\n  email: String,\n  password: String,\n  createdAt: { type: Date, default: Date.now }\n});\n\nconst User = mongoose.model('User', userSchema);\n\n// API Routes\napp.post('/api/register', async (req, res) => {\n  try {\n    const user = new User(req.body);\n    await user.save();\n    res.status(201).json({ message: 'User created' });\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Client-side Authentication\nasync function login(email, password) {\n  try {\n    const response = await fetch('/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ email, password })\n    });\n    const data = await response.json();\n    localStorage.setItem('token', data.token);\n    return data;\n  } catch (error) {\n    console.error('Login failed:', error);\n    throw error;\n  }\n}"}];return a().createElement(s.P.div,{initial:{opacity:0},animate:{opacity:1},transition:{duration:.5}},a().createElement("h1",{className:"text-3xl font-bold mb-6"},"JavaScript Projects"),a().createElement("p",{className:"text-gray-600 mb-8"},"Apply your JavaScript knowledge by building real-world projects. Each project introduces new concepts and challenges."),a().createElement("div",{className:"space-y-12"},e.map((e=>a().createElement(s.P.div,{key:e.id,initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"border border-gray-200 rounded-xl p-6 hover:border-blue-500 transition-colors"},a().createElement("div",{className:"flex items-center mb-4"},a().createElement("span",{className:"text-blue-600 mr-3"},e.icon),a().createElement("h2",{className:"text-xl font-semibold"},e.title)),a().createElement("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6"},a().createElement("div",null,a().createElement("h3",{className:"text-lg font-medium mb-3"},"Project Overview"),a().createElement("p",{className:"text-gray-600 mb-4"},e.description),a().createElement("h4",{className:"font-medium mb-2"},"Key Features:"),a().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-1"},e.features.map(((e,t)=>a().createElement("li",{key:t},e))))),a().createElement("div",null,a().createElement("h3",{className:"text-lg font-medium mb-3"},"Sample Code"),a().createElement(i.A,{language:"javascript",style:c.A,className:"rounded-lg"},e.code))),a().createElement("div",{className:"mt-6 flex space-x-4"},a().createElement("button",{className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"},"Start Project"),a().createElement("button",{className:"border border-blue-600 text-blue-600 px-6 py-2 rounded-lg hover:bg-blue-50 transition-colors"},"View Solution")))))),a().createElement("div",{className:"mt-12 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl p-8"},a().createElement("h3",{className:"text-2xl font-semibold mb-4"},"Complete the Course"),a().createElement("p",{className:"mb-6 opacity-90"},"Finish all projects to earn your JavaScript Developer Certificate and showcase your skills to potential employers."),a().createElement("button",{className:"bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-blue-50 transition-colors"},"Get Certified")),a().createElement(l.default,null))}}}]);