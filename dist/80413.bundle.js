"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[80413],{80413:(e,t,s)=>{s.r(t),s.d(t,{default:()=>u});var r=s(96540),n=s.n(r),a=s(71181),o=s(84976),l=s(42644);const u=()=>n().createElement(a.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},n().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Routing in Node.js"),n().createElement("section",{className:"mb-8"},n().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Introduction to Routing"),n().createElement("p",{className:"text-gray-600 mb-4"},"Routing determines how an application responds to client requests to specific endpoints (URLs). In Node.js, you can implement routing using either the built-in HTTP module or popular frameworks like Express.js."),n().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},n().createElement("div",{className:"flex items-start"},n().createElement(l.usH,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),n().createElement("div",null,n().createElement("h3",{className:"font-semibold mb-2"},"Key Concepts"),n().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},n().createElement("li",null,"URL patterns and parameters"),n().createElement("li",null,"HTTP methods (GET, POST, PUT, DELETE)"),n().createElement("li",null,"Route handlers and middleware"),n().createElement("li",null,"Route parameters and query strings"),n().createElement("li",null,"Route organization and modularization")))))),n().createElement("section",{className:"mb-8"},n().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Basic Routing with HTTP Module"),n().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},n().createElement("div",{className:"flex items-start"},n().createElement(l.LIi,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),n().createElement("div",null,n().createElement("p",{className:"text-gray-600 mb-4"},"Implement basic routing using Node.js's built-in HTTP module:"),n().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const http = require('http');\nconst url = require('url');\n\nconst server = http.createServer((req, res) => {\n  // Parse the URL\n  const parsedUrl = url.parse(req.url, true);\n  const path = parsedUrl.pathname;\n  const method = req.method;\n\n  // Set response headers\n  res.setHeader('Content-Type', 'application/json');\n\n  // Route handling\n  if (path === '/api/users' && method === 'GET') {\n    res.statusCode = 200;\n    res.end(JSON.stringify({ users: ['John', 'Jane', 'Bob'] }));\n  }\n  else if (path === '/api/users' && method === 'POST') {\n    let body = '';\n    \n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      const user = JSON.parse(body);\n      res.statusCode = 201;\n      res.end(JSON.stringify({ message: 'User created', user }));\n    });\n  }\n  else if (path.startsWith('/api/users/')) {\n    const userId = path.split('/')[3];\n    \n    if (method === 'GET') {\n      res.statusCode = 200;\n      res.end(JSON.stringify({ userId, name: 'John Doe' }));\n    }\n    else if (method === 'PUT') {\n      let body = '';\n      \n      req.on('data', chunk => {\n        body += chunk.toString();\n      });\n\n      req.on('end', () => {\n        const updates = JSON.parse(body);\n        res.statusCode = 200;\n        res.end(JSON.stringify({ message: 'User updated', userId, updates }));\n      });\n    }\n    else if (method === 'DELETE') {\n      res.statusCode = 200;\n      res.end(JSON.stringify({ message: 'User deleted', userId }));\n    }\n  }\n  else {\n    res.statusCode = 404;\n    res.end(JSON.stringify({ error: 'Not Found' }));\n  }\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000');\n});"))))),n().createElement("section",{className:"mb-8"},n().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Express.js Routing"),n().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},n().createElement("div",{className:"flex items-start"},n().createElement(l.est,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),n().createElement("div",null,n().createElement("p",{className:"text-gray-600 mb-4"},"Express.js provides a more elegant and powerful routing system:"),n().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"const express = require('express');\nconst app = express();\n\n// Middleware\napp.use(express.json());\n\n// Basic Routes\napp.get('/', (req, res) => {\n  res.send('Welcome to the API');\n});\n\n// Route Parameters\napp.get('/users/:id', (req, res) => {\n  const userId = req.params.id;\n  res.json({ userId, name: 'John Doe' });\n});\n\n// Query Strings\napp.get('/search', (req, res) => {\n  const { q, limit = 10 } = req.query;\n  res.json({ query: q, limit });\n});\n\n// Multiple Route Handlers\napp.get('/protected',\n  authenticateUser,\n  authorizeUser,\n  (req, res) => {\n    res.json({ message: 'Protected resource' });\n  }\n);\n\n// Router Instance\nconst userRouter = express.Router();\n\nuserRouter.get('/', (req, res) => {\n  res.json({ users: ['John', 'Jane', 'Bob'] });\n});\n\nuserRouter.post('/', (req, res) => {\n  const user = req.body;\n  res.status(201).json({ message: 'User created', user });\n});\n\nuserRouter.put('/:id', (req, res) => {\n  const { id } = req.params;\n  const updates = req.body;\n  res.json({ message: 'User updated', id, updates });\n});\n\nuserRouter.delete('/:id', (req, res) => {\n  const { id } = req.params;\n  res.json({ message: 'User deleted', id });\n});\n\n// Mount router\napp.use('/api/users', userRouter);\n\n// Error Handling\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Something broke!' });\n});\n\n// 404 Handler\napp.use((req, res) => {\n  res.status(404).json({ error: 'Not Found' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});"))))),n().createElement("section",{className:"mb-8"},n().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Route Organization"),n().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},n().createElement("div",{className:"flex items-start"},n().createElement(l.s_k,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),n().createElement("div",null,n().createElement("p",{className:"text-gray-600 mb-4"},"Best practices for organizing routes in a larger application:"),n().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"// routes/users.js\nconst express = require('express');\nconst router = express.Router();\n\nrouter.get('/', userController.getUsers);\nrouter.post('/', userController.createUser);\nrouter.get('/:id', userController.getUserById);\nrouter.put('/:id', userController.updateUser);\nrouter.delete('/:id', userController.deleteUser);\n\nmodule.exports = router;\n\n// routes/posts.js\nconst express = require('express');\nconst router = express.Router();\n\nrouter.get('/', postController.getPosts);\nrouter.post('/', postController.createPost);\nrouter.get('/:id', postController.getPostById);\nrouter.put('/:id', postController.updatePost);\nrouter.delete('/:id', postController.deletePost);\n\nmodule.exports = router;\n\n// app.js\nconst express = require('express');\nconst app = express();\n\nconst userRoutes = require('./routes/users');\nconst postRoutes = require('./routes/posts');\n\napp.use('/api/users', userRoutes);\napp.use('/api/posts', postRoutes);\n\n// Versioning API routes\napp.use('/api/v1/users', require('./routes/v1/users'));\napp.use('/api/v2/users', require('./routes/v2/users'));"))))),n().createElement("section",{className:"mb-8"},n().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Best Practices"),n().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},n().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},n().createElement("li",null,"Use descriptive and RESTful route names"),n().createElement("li",null,"Implement proper error handling"),n().createElement("li",null,"Validate route parameters and request body"),n().createElement("li",null,"Use middleware for common functionality"),n().createElement("li",null,"Organize routes by resource or feature"),n().createElement("li",null,"Version your API routes"),n().createElement("li",null,"Use appropriate HTTP methods and status codes"),n().createElement("li",null,"Implement rate limiting and security measures")))),n().createElement("div",{className:"mt-12 flex justify-between items-center"},n().createElement(o.N_,{to:"/nodejs-course/http-module",className:"text-blue-600 hover:text-blue-800"},"← HTTP Module"),n().createElement(o.N_,{to:"/nodejs-course/middleware",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"},"Next: Middleware →")))}}]);