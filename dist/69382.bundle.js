"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[69382],{69382:(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});var r=n(96540),s=n.n(r),a=n(71181),l=n(84976);const o=()=>s().createElement(a.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},s().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Debugging React Applications"),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Understanding Debugging"),s().createElement("p",{className:"text-gray-600 mb-4"},"Debugging is the process of finding and fixing errors in your React applications. It's an essential skill that helps you identify issues, understand application behavior, and improve code quality. Effective debugging can save hours of development time and prevent bugs from reaching production.")),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Common Types of React Bugs"),s().createElement("div",{className:"bg-gray-50 p-6 rounded-lg mb-4"},s().createElement("h3",{className:"text-xl font-semibold mb-3"},"1. State Management Issues"),s().createElement("div",{className:"bg-red-50 p-4 rounded-lg mb-4"},s().createElement("h4",{className:"font-semibold text-red-800 mb-2"},"❌ Common Problem:"),s().createElement("pre",{className:"bg-red-100 p-3 rounded text-sm overflow-x-auto"},"const [count, setCount] = useState(0);\n\n// Wrong: Mutating state directly\nconst increment = () => {\n  count++; // This won't trigger re-render\n};")),s().createElement("div",{className:"bg-green-50 p-4 rounded-lg"},s().createElement("h4",{className:"font-semibold text-green-800 mb-2"},"✅ Solution:"),s().createElement("pre",{className:"bg-green-100 p-3 rounded text-sm overflow-x-auto"},"const [count, setCount] = useState(0);\n\n// Correct: Using setState function\nconst increment = () => {\n  setCount(count + 1); // or setCount(prev => prev + 1)\n};"))),s().createElement("div",{className:"bg-gray-50 p-6 rounded-lg mb-4"},s().createElement("h3",{className:"text-xl font-semibold mb-3"},"2. useEffect Dependencies"),s().createElement("div",{className:"bg-red-50 p-4 rounded-lg mb-4"},s().createElement("h4",{className:"font-semibold text-red-800 mb-2"},"❌ Common Problem:"),s().createElement("pre",{className:"bg-red-100 p-3 rounded text-sm overflow-x-auto"},"useEffect(() => {\n  fetchData(userId);\n}, []); // Missing dependency: userId")),s().createElement("div",{className:"bg-green-50 p-4 rounded-lg"},s().createElement("h4",{className:"font-semibold text-green-800 mb-2"},"✅ Solution:"),s().createElement("pre",{className:"bg-green-100 p-3 rounded text-sm overflow-x-auto"},"useEffect(() => {\n  fetchData(userId);\n}, [userId]); // Include all dependencies"))),s().createElement("div",{className:"bg-gray-50 p-6 rounded-lg"},s().createElement("h3",{className:"text-xl font-semibold mb-3"},"3. Key Prop Issues"),s().createElement("div",{className:"bg-red-50 p-4 rounded-lg mb-4"},s().createElement("h4",{className:"font-semibold text-red-800 mb-2"},"❌ Common Problem:"),s().createElement("pre",{className:"bg-red-100 p-3 rounded text-sm overflow-x-auto"},"// Using array index as key\n{items.map((item, index) => (\n  <div key={index}>{item.name}</div>\n))}")),s().createElement("div",{className:"bg-green-50 p-4 rounded-lg"},s().createElement("h4",{className:"font-semibold text-green-800 mb-2"},"✅ Solution:"),s().createElement("pre",{className:"bg-green-100 p-3 rounded text-sm overflow-x-auto"},"// Using unique identifier as key\n{items.map((item) => (\n  <div key={item.id}>{item.name}</div>\n))}")))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Debugging Techniques"),s().createElement("div",{className:"bg-blue-50 p-6 rounded-lg mb-4"},s().createElement("h3",{className:"text-xl font-semibold mb-3"},"1. Console Logging"),s().createElement("p",{className:"text-gray-600 mb-3"},"The most basic but effective debugging technique. Use console methods strategically:"),s().createElement("pre",{className:"bg-white p-4 rounded border text-sm overflow-x-auto"},"// Basic logging\nconsole.log('Component rendered with props:', props);\n\n// Conditional logging\nif (process.env.NODE_ENV === 'development') {\n  console.log('Debug info:', { state, props });\n}\n\n// Different log levels\nconsole.warn('Warning: Deprecated prop used');\nconsole.error('Error occurred:', error);\nconsole.table(arrayData); // Great for arrays/objects")),s().createElement("div",{className:"bg-blue-50 p-6 rounded-lg mb-4"},s().createElement("h3",{className:"text-xl font-semibold mb-3"},"2. React Developer Tools"),s().createElement("p",{className:"text-gray-600 mb-3"},"Browser extension that provides powerful debugging capabilities:"),s().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},s().createElement("li",null,"Inspect component hierarchy and props"),s().createElement("li",null,"View and modify state in real-time"),s().createElement("li",null,"Track component re-renders"),s().createElement("li",null,"Profile performance issues"),s().createElement("li",null,"Debug hooks and context"))),s().createElement("div",{className:"bg-blue-50 p-6 rounded-lg mb-4"},s().createElement("h3",{className:"text-xl font-semibold mb-3"},"3. Breakpoints and Debugger"),s().createElement("pre",{className:"bg-white p-4 rounded border text-sm overflow-x-auto"},"const handleClick = () => {\n  debugger; // Pauses execution here\n  \n  // Or use conditional breakpoints\n  if (someCondition) {\n    debugger;\n  }\n  \n  setCount(count + 1);\n};")),s().createElement("div",{className:"bg-blue-50 p-6 rounded-lg"},s().createElement("h3",{className:"text-xl font-semibold mb-3"},"4. Error Boundaries"),s().createElement("p",{className:"text-gray-600 mb-3"},"Catch JavaScript errors anywhere in the component tree:"),s().createElement("pre",{className:"bg-white p-4 rounded border text-sm overflow-x-auto"},"class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}"))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Advanced Debugging Strategies"),s().createElement("div",{className:"bg-yellow-50 p-6 rounded-lg mb-4"},s().createElement("h3",{className:"text-xl font-semibold mb-3"},"1. Custom Hooks for Debugging"),s().createElement("pre",{className:"bg-white p-4 rounded border text-sm overflow-x-auto"},"// Hook to track why a component re-rendered\nconst useWhyDidYouUpdate = (name, props) => {\n  const previous = useRef();\n  \n  useEffect(() => {\n    if (previous.current) {\n      const allKeys = Object.keys({...previous.current, ...props});\n      const changedKeys = {};\n      \n      allKeys.forEach(key => {\n        if (previous.current[key] !== props[key]) {\n          changedKeys[key] = {\n            from: previous.current[key],\n            to: props[key]\n          };\n        }\n      });\n      \n      if (Object.keys(changedKeys).length) {\n        console.log('[why-did-you-update]', name, changedKeys);\n      }\n    }\n    \n    previous.current = props;\n  });\n};\n\n// Usage\nconst MyComponent = (props) => {\n  useWhyDidYouUpdate('MyComponent', props);\n  return <div>...</div>;\n};")),s().createElement("div",{className:"bg-yellow-50 p-6 rounded-lg mb-4"},s().createElement("h3",{className:"text-xl font-semibold mb-3"},"2. Performance Debugging"),s().createElement("pre",{className:"bg-white p-4 rounded border text-sm overflow-x-auto"},"// Measure component render time\nconst useRenderTime = (componentName) => {\n  useEffect(() => {\n    const start = performance.now();\n    \n    return () => {\n      const end = performance.now();\n      console.log(`${componentName} render time: ${end - start}ms`);\n    };\n  });\n};\n\n// Profile expensive operations\nconst ExpensiveComponent = () => {\n  useRenderTime('ExpensiveComponent');\n  \n  const expensiveValue = useMemo(() => {\n    console.time('expensive-calculation');\n    const result = heavyCalculation();\n    console.timeEnd('expensive-calculation');\n    return result;\n  }, [dependency]);\n  \n  return <div>{expensiveValue}</div>;\n};")),s().createElement("div",{className:"bg-yellow-50 p-6 rounded-lg"},s().createElement("h3",{className:"text-xl font-semibold mb-3"},"3. Network Request Debugging"),s().createElement("pre",{className:"bg-white p-4 rounded border text-sm overflow-x-auto"},"const useApiCall = (url) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('Fetching from:', url);\n        const response = await fetch(url);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const result = await response.json();\n        console.log('Received data:', result);\n        setData(result);\n      } catch (err) {\n        console.error('Fetch error:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchData();\n  }, [url]);\n  \n  return { data, loading, error };\n};"))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Debugging Tools and Extensions"),s().createElement("div",{className:"grid md:grid-cols-2 gap-6"},s().createElement("div",{className:"bg-white p-6 rounded-lg border"},s().createElement("h3",{className:"text-lg font-semibold mb-3"},"Browser Extensions"),s().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-1"},s().createElement("li",null,"React Developer Tools"),s().createElement("li",null,"Redux DevTools"),s().createElement("li",null,"React Hook Form DevTools"),s().createElement("li",null,"Profiler for React"))),s().createElement("div",{className:"bg-white p-6 rounded-lg border"},s().createElement("h3",{className:"text-lg font-semibold mb-3"},"VS Code Extensions"),s().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-1"},s().createElement("li",null,"ES7+ React/Redux/React-Native snippets"),s().createElement("li",null,"Bracket Pair Colorizer"),s().createElement("li",null,"Auto Rename Tag"),s().createElement("li",null,"Thunder Client (API testing)"))))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Best Practices for Debugging"),s().createElement("div",{className:"bg-green-50 p-6 rounded-lg"},s().createElement("ul",{className:"space-y-3 text-gray-700"},s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-green-600 mr-2"},"✓"),s().createElement("span",null,s().createElement("strong",null,"Use descriptive variable names")," - Makes debugging easier")),s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-green-600 mr-2"},"✓"),s().createElement("span",null,s().createElement("strong",null,"Add meaningful console logs")," - Don't just log variables, explain what they represent")),s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-green-600 mr-2"},"✓"),s().createElement("span",null,s().createElement("strong",null,"Use TypeScript")," - Catch errors at compile time")),s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-green-600 mr-2"},"✓"),s().createElement("span",null,s().createElement("strong",null,"Test edge cases")," - Empty arrays, null values, undefined props")),s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-green-600 mr-2"},"✓"),s().createElement("span",null,s().createElement("strong",null,"Remove debug code")," - Clean up console.logs before production")),s().createElement("li",{className:"flex items-start"},s().createElement("span",{className:"text-green-600 mr-2"},"✓"),s().createElement("span",null,s().createElement("strong",null,"Use error boundaries")," - Gracefully handle errors in production"))))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Practice Exercise"),s().createElement("div",{className:"bg-gray-50 p-6 rounded-lg"},s().createElement("h3",{className:"text-lg font-semibold mb-3"},"Debug This Component"),s().createElement("p",{className:"text-gray-600 mb-4"},"Try to identify and fix the bugs in this component:"),s().createElement("pre",{className:"bg-white p-4 rounded border text-sm overflow-x-auto"},"const BuggyComponent = ({ items }) => {\n  const [filter, setFilter] = useState('');\n  const [filteredItems, setFilteredItems] = useState([]);\n  \n  useEffect(() => {\n    const filtered = items.filter(item => \n      item.name.includes(filter)\n    );\n    setFilteredItems(filtered);\n  }, []); // Bug 1: Missing dependencies\n  \n  const handleDelete = (id) => {\n    const newItems = items.filter(item => item.id !== id);\n    items = newItems; // Bug 2: Mutating props\n  };\n  \n  return (\n    <div>\n      <input \n        value={filter}\n        onChange={(e) => setFilter(e.target.value)}\n      />\n      {filteredItems.map((item, index) => (\n        <div key={index}> {/* Bug 3: Using index as key */}\n          <span>{item.name}</span>\n          <button onClick={() => handleDelete(item.id)}>\n            Delete\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};"),s().createElement("p",{className:"text-sm text-gray-500 mt-2"},"Hint: There are at least 3 bugs in this component. Can you find and fix them all?"))),s().createElement("div",{className:"mt-12 flex justify-between items-center"},s().createElement(l.N_,{to:"/react-course/dev-tools",className:"text-blue-600 hover:text-blue-800 transition-colors"},"← Previous: Dev Tools"),s().createElement(l.N_,{to:"/react-course/best-practices",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"},"Next: Best Practices →")))}}]);