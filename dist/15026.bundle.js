"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[15026],{15026:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});var a=n(96540),s=n.n(a),r=n(71181),i=n(84976),l=n(42644),c=n(58027),o=n(90956);const m=()=>s().createElement(r.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},s().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Yup Schema Validation"),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Understanding Yup"),s().createElement("p",{className:"text-gray-600 mb-4"},"Yup is a schema builder for runtime value parsing and validation. It's commonly used with React form libraries like Formik and React Hook Form to provide robust form validation."),s().createElement("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-4"},s().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},s().createElement(l.pcC,{className:"text-2xl text-blue-600 mb-2"}),s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Schema-based"),s().createElement("p",{className:"text-gray-600"},"Declarative validation rules")),s().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},s().createElement(l.A3x,{className:"text-2xl text-blue-600 mb-2"}),s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Type Safety"),s().createElement("p",{className:"text-gray-600"},"Runtime type checking")),s().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},s().createElement(l.PjK,{className:"text-2xl text-blue-600 mb-2"}),s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Extensible"),s().createElement("p",{className:"text-gray-600"},"Custom validation rules")))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Basic Schema Validation"),s().createElement("p",{className:"text-gray-600 mb-4"},"Yup provides a simple and intuitive API for defining validation schemas. Here's how to create and use basic validation rules."),s().createElement(c.A,{language:"jsx",style:o.A,className:"rounded-lg"},"import * as Yup from 'yup';\n\n// Basic schema\nconst userSchema = Yup.object().shape({\n  username: Yup.string()\n    .required('Username is required')\n    .min(3, 'Username must be at least 3 characters')\n    .max(20, 'Username must not exceed 20 characters'),\n  email: Yup.string()\n    .required('Email is required')\n    .email('Invalid email format'),\n  age: Yup.number()\n    .required('Age is required')\n    .positive('Age must be a positive number')\n    .integer('Age must be an integer')\n    .min(18, 'Must be at least 18 years old'),\n  website: Yup.string()\n    .url('Must be a valid URL')\n    .nullable(),\n  acceptTerms: Yup.boolean()\n    .oneOf([true], 'Must accept terms and conditions')\n});\n\n// Usage with form data\nconst validateUser = async (userData) => {\n  try {\n    const validData = await userSchema.validate(userData, {\n      abortEarly: false // Show all errors, not just the first one\n    });\n    return { isValid: true, data: validData };\n  } catch (err) {\n    return { isValid: false, errors: err.errors };\n  }\n};")),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Advanced Validation"),s().createElement("p",{className:"text-gray-600 mb-4"},"Yup supports advanced validation scenarios including custom validation functions, nested objects, and arrays."),s().createElement(c.A,{language:"jsx",style:o.A,className:"rounded-lg"},"// Advanced schema with custom validation\nconst productSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Product name is required')\n    .test(\n      'no-special-chars',\n      'Product name cannot contain special characters',\n      value => /^[a-zA-Z0-9 ]+$/.test(value)\n    ),\n  price: Yup.number()\n    .required('Price is required')\n    .positive('Price must be positive')\n    .test(\n      'is-decimal',\n      'Price must have 2 decimal places',\n      value => /^\\d+\\.\\d{2}$/.test(value.toString())\n    ),\n  category: Yup.string()\n    .required('Category is required')\n    .oneOf(\n      ['electronics', 'clothing', 'food'],\n      'Invalid category'\n    ),\n  tags: Yup.array()\n    .of(Yup.string())\n    .min(1, 'At least one tag is required')\n    .max(5, 'Cannot have more than 5 tags'),\n  dimensions: Yup.object().shape({\n    width: Yup.number().required('Width is required'),\n    height: Yup.number().required('Height is required'),\n    depth: Yup.number().required('Depth is required')\n  }),\n  inStock: Yup.boolean(),\n  quantity: Yup.number()\n    .when('inStock', {\n      is: true,\n      then: Yup.number()\n        .required('Quantity is required when in stock')\n        .min(1, 'Must have at least 1 item')\n    })\n});")),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Conditional Validation"),s().createElement("p",{className:"text-gray-600 mb-4"},"Yup allows you to define conditional validation rules based on other field values, perfect for complex form scenarios."),s().createElement(c.A,{language:"jsx",style:o.A,className:"rounded-lg"},"// Conditional validation\nconst registrationSchema = Yup.object().shape({\n  accountType: Yup.string()\n    .required('Account type is required')\n    .oneOf(['personal', 'business']),\n  \n  // Personal account fields\n  ssn: Yup.string().when('accountType', {\n    is: 'personal',\n    then: Yup.string()\n      .required('SSN is required for personal accounts')\n      .matches(/^\\d{3}-\\d{2}-\\d{4}$/, 'Invalid SSN format')\n  }),\n  \n  // Business account fields\n  ein: Yup.string().when('accountType', {\n    is: 'business',\n    then: Yup.string()\n      .required('EIN is required for business accounts')\n      .matches(/^\\d{2}-\\d{7}$/, 'Invalid EIN format')\n  }),\n  \n  companyName: Yup.string().when('accountType', {\n    is: 'business',\n    then: Yup.string().required('Company name is required')\n  }),\n\n  // Common fields with conditional rules\n  phone: Yup.string()\n    .required('Phone number is required')\n    .when('accountType', {\n      is: 'business',\n      then: Yup.string()\n        .matches(/^\\+1\\d{10}$/, 'Business phone must be in international format')\n    }),\n\n  // Array validation with conditions\n  contacts: Yup.array().when('accountType', {\n    is: 'business',\n    then: Yup.array()\n      .of(\n        Yup.object().shape({\n          name: Yup.string().required('Contact name is required'),\n          role: Yup.string().required('Contact role is required')\n        })\n      )\n      .min(1, 'At least one contact is required')\n      .max(5, 'Maximum 5 contacts allowed')\n  })\n});")),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Yup Best Practices"),s().createElement("div",{className:"bg-white shadow-md rounded-lg p-6"},s().createElement("ul",{className:"list-disc list-inside space-y-3 text-gray-600"},s().createElement("li",null,"Define reusable validation schemas"),s().createElement("li",null,"Use TypeScript for better type inference"),s().createElement("li",null,"Handle validation errors gracefully"),s().createElement("li",null,"Cache validation schemas when possible"),s().createElement("li",null,"Use meaningful error messages"),s().createElement("li",null,"Test validation rules thoroughly"),s().createElement("li",null,"Consider localization for error messages")))),s().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-8"},s().createElement("h3",{className:"text-lg font-semibold text-blue-800 mb-2"},"Pro Tips"),s().createElement("ul",{className:"list-disc list-inside space-y-2 text-blue-700"},s().createElement("li",null,"Use schema composition for complex forms"),s().createElement("li",null,"Implement custom validation methods"),s().createElement("li",null,"Consider performance with large forms"),s().createElement("li",null,"Use schema caching for better performance"))),s().createElement("div",{className:"mt-12 flex justify-between items-center"},s().createElement(i.N_,{to:"/react-course/react-hook-form",className:"text-blue-600 hover:text-blue-800 flex items-center"},s().createElement(l.PjK,{className:"mr-2"})," Previous: React Hook Form"),s().createElement(i.N_,{to:"/react-course/routing",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center"},"Next: Routing ",s().createElement(l.PjK,{className:"ml-2"}))))}}]);