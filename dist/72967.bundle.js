"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[72967],{72967:(e,n,t)=>{t.r(n),t.d(n,{default:()=>m});var l=t(96540),a=t.n(l),s=t(71181),o=t(84976),c=t(42644),r=t(58027),i=t(90956);const m=()=>a().createElement(s.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},a().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Events in React"),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Handling Events"),a().createElement("p",{className:"text-gray-600 mb-4"},"React events are named using camelCase and passed as JSX attributes. They are similar to handling events on DOM elements but with some syntactical differences."),a().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-4"},a().createElement("p",{className:"text-blue-700"},"React events are synthetic events that wrap the native browser events, ensuring consistent behavior across different browsers.")),a().createElement(r.A,{language:"jsx",style:i.A,className:"rounded-lg"},"function Button() {\n  const handleClick = () => {\n    console.log('Button clicked!');\n  };\n\n  return (\n    <button onClick={handleClick}>\n      Click me\n    </button>\n  );\n}\n\n// Inline event handler\nfunction Button() {\n  return (\n    <button onClick={() => console.log('Clicked!')}>\n      Click me\n    </button>\n  );\n}")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"The Event Object"),a().createElement("p",{className:"text-gray-600 mb-4"},"React passes synthetic events to event handlers. These events have the same interface as native events but work identically across all browsers."),a().createElement(r.A,{language:"jsx",style:i.A,className:"rounded-lg"},"function Form() {\n  const handleSubmit = (event) => {\n    event.preventDefault(); // Prevent form submission\n    console.log('Form submitted');\n  };\n\n  const handleChange = (event) => {\n    console.log('Input value:', event.target.value);\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      console.log('Enter key pressed');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        onChange={handleChange}\n        onKeyPress={handleKeyPress}\n        placeholder=\"Type something\"\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Passing Arguments to Event Handlers"),a().createElement("p",{className:"text-gray-600 mb-4"},"There are several ways to pass additional data to event handlers. The most common approach is using arrow functions or the bind method."),a().createElement(r.A,{language:"jsx",style:i.A,className:"rounded-lg"},"function ItemList() {\n  const handleClick = (id, event) => {\n    console.log('Item clicked:', id);\n    console.log('Event:', event);\n  };\n\n  return (\n    <ul>\n      <li onClick={(e) => handleClick(1, e)}>Item 1</li>\n      <li onClick={(e) => handleClick(2, e)}>Item 2</li>\n      <li onClick={(e) => handleClick(3, e)}>Item 3</li>\n    </ul>\n  );\n}\n\n// Using bind (less common)\nfunction ItemList() {\n  const handleClick = (id, event) => {\n    console.log('Item clicked:', id);\n  };\n\n  return (\n    <ul>\n      <li onClick={handleClick.bind(null, 1)}>Item 1</li>\n      <li onClick={handleClick.bind(null, 2)}>Item 2</li>\n      <li onClick={handleClick.bind(null, 3)}>Item 3</li>\n    </ul>\n  );\n}")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Event Delegation"),a().createElement("p",{className:"text-gray-600 mb-4"},"React's event system uses event delegation internally, but you can still implement your own delegation patterns when needed."),a().createElement(r.A,{language:"jsx",style:i.A,className:"rounded-lg"},'function TodoList() {\n  const handleClick = (event) => {\n    if (event.target.tagName === \'LI\') {\n      const id = event.target.dataset.id;\n      console.log(\'Todo clicked:\', id);\n    }\n  };\n\n  return (\n    <ul onClick={handleClick}>\n      <li data-id="1">Todo 1</li>\n      <li data-id="2">Todo 2</li>\n      <li data-id="3">Todo 3</li>\n    </ul>\n  );\n}')),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Custom Events"),a().createElement("p",{className:"text-gray-600 mb-4"},"While React doesn't have true custom events like the DOM, you can achieve similar functionality using props and callback functions."),a().createElement(r.A,{language:"jsx",style:i.A,className:"rounded-lg"},"// Child Component\nfunction ChildComponent({ onCustomEvent }) {\n  const triggerCustomEvent = () => {\n    onCustomEvent({ type: 'custom', data: 'Hello from child!' });\n  };\n\n  return (\n    <button onClick={triggerCustomEvent}>\n      Trigger Custom Event\n    </button>\n  );\n}\n\n// Parent Component\nfunction ParentComponent() {\n  const handleCustomEvent = (event) => {\n    console.log('Custom event received:', event);\n  };\n\n  return (\n    <ChildComponent onCustomEvent={handleCustomEvent} />\n  );\n}")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Common React Events"),a().createElement("div",{className:"bg-white shadow-md rounded-lg p-6"},a().createElement("ul",{className:"list-disc list-inside space-y-3 text-gray-600"},a().createElement("li",null,a().createElement("code",{className:"bg-gray-100 px-2 py-1 rounded"},"onClick")," - Clicking an element"),a().createElement("li",null,a().createElement("code",{className:"bg-gray-100 px-2 py-1 rounded"},"onChange")," - Form input changes"),a().createElement("li",null,a().createElement("code",{className:"bg-gray-100 px-2 py-1 rounded"},"onSubmit")," - Form submission"),a().createElement("li",null,a().createElement("code",{className:"bg-gray-100 px-2 py-1 rounded"},"onFocus")," - Element receives focus"),a().createElement("li",null,a().createElement("code",{className:"bg-gray-100 px-2 py-1 rounded"},"onBlur")," - Element loses focus"),a().createElement("li",null,a().createElement("code",{className:"bg-gray-100 px-2 py-1 rounded"},"onKeyDown")," - Keyboard key is pressed"),a().createElement("li",null,a().createElement("code",{className:"bg-gray-100 px-2 py-1 rounded"},"onMouseEnter")," - Mouse enters element"),a().createElement("li",null,a().createElement("code",{className:"bg-gray-100 px-2 py-1 rounded"},"onMouseLeave")," - Mouse leaves element")))),a().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-8"},a().createElement("h3",{className:"text-lg font-semibold text-blue-800 mb-2"},"Pro Tips"),a().createElement("ul",{className:"list-disc list-inside space-y-2 text-blue-700"},a().createElement("li",null,"Use debounce/throttle for performance-intensive events"),a().createElement("li",null,"Clean up event listeners in useEffect cleanup function"),a().createElement("li",null,"Consider accessibility when handling keyboard events"),a().createElement("li",null,"Use event pooling carefully in older React versions"))),a().createElement("div",{className:"mt-12 flex justify-between items-center"},a().createElement(o.N_,{to:"/react-course/state",className:"text-blue-600 hover:text-blue-800 flex items-center"},a().createElement(c.aze,{className:"mr-2"})," Previous: State"),a().createElement(o.N_,{to:"/react-course/lifecycle",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center"},"Next: Lifecycle ",a().createElement(c.PjK,{className:"ml-2"}))))}}]);