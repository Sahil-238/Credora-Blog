"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[15328],{15328:(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});var l=n(96540),a=n.n(l),r=n(71181),s=n(84976);const o=()=>a().createElement(r.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},a().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Performance Optimization"),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"What is Performance Optimization?"),a().createElement("p",{className:"text-gray-600 mb-4"},"Performance optimization in React refers to techniques and best practices to make your app faster, more responsive, and efficient. It helps reduce unnecessary re-renders, minimize resource consumption, and improve the user experience.")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Why Optimize React Apps?"),a().createElement("ul",{className:"list-disc list-inside text-gray-600 mb-4"},a().createElement("li",null,"Improves app responsiveness and fluidity."),a().createElement("li",null,"Reduces unnecessary CPU and memory usage."),a().createElement("li",null,"Enhances scalability for larger apps."),a().createElement("li",null,"Better user experience on slower devices or networks."))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Common Optimization Techniques"),a().createElement("ul",{className:"list-disc list-inside space-y-3 text-gray-600"},a().createElement("li",null,a().createElement("strong",null,"React.memo:")," Memoizes functional components to avoid unnecessary re-renders when props haven't changed."),a().createElement("li",null,a().createElement("strong",null,"useMemo and useCallback:")," Memoize expensive calculations and callback functions."),a().createElement("li",null,a().createElement("strong",null,"Code Splitting:")," Load components lazily using React.lazy and Suspense to reduce initial bundle size."),a().createElement("li",null,a().createElement("strong",null,"Virtualization:")," Use libraries like react-window or react-virtualized for efficiently rendering large lists."),a().createElement("li",null,a().createElement("strong",null,"Avoid Inline Functions & Objects:")," Prevents creating new references each render causing child re-renders."),a().createElement("li",null,a().createElement("strong",null,"Pure Components:")," Class components can use PureComponent for shallow prop/state comparison."))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Example: Using React.memo"),a().createElement("p",{className:"text-gray-600 mb-4"},"Here is a simple example showing how ",a().createElement("code",null,"React.memo")," can prevent unnecessary re-rendering of a child component:"),a().createElement("pre",{className:"bg-gray-100 p-4 rounded-lg overflow-auto mb-4"},"\nimport React, { useState } from 'react';\n\nconst Child = React.memo(({ count }) => {\n  console.log('Child rendered');\n  return <div>Count: {count}</div>;\n});\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [other, setOther] = useState(false);\n\n  return (\n    <div>\n      <Child count={count} />\n      <button onClick={() => setCount(count + 1)}>Increment Count</button>\n      <button onClick={() => setOther(!other)}>Toggle Other</button>\n    </div>\n  );\n}\n\nexport default App;\n          "),a().createElement("p",{className:"text-gray-600 mb-4"},"In this example, the ",a().createElement("code",null,"Child")," component only re-renders when the ",a().createElement("code",null,"count"),' prop changes. Clicking "Toggle Other" won\'t cause ',a().createElement("code",null,"Child")," to re-render.")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Best Practices"),a().createElement("ul",{className:"list-disc list-inside space-y-3 text-gray-600"},a().createElement("li",null,"Use React Developer Tools to analyze component re-renders."),a().createElement("li",null,"Memoize components and functions only when you see performance issues, as premature optimization can add complexity."),a().createElement("li",null,"Lazy load components/routes for better initial load times."),a().createElement("li",null,"Keep components small and focused for easier memoization and optimization."),a().createElement("li",null,"Use virtualization for long lists or heavy UI rendering."))),a().createElement("div",{className:"mt-12 flex justify-between items-center"},a().createElement(s.N_,{to:"/react-course",className:"text-blue-600 hover:text-blue-800"},"← Previous"),a().createElement(s.N_,{to:"/react-course/memo",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"},"Next →")))}}]);