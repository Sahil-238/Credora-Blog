"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[46386],{46386:(e,n,t)=>{t.r(n),t.d(n,{default:()=>m});var a=t(96540),l=t.n(a),i=t(71181),r=t(42644),o=t(15235),c=t(90956),s=t(12198);const m=()=>{const e=[{id:"selecting",title:"Selecting Elements",icon:l().createElement(r.CKj,null),code:"// Get element by ID\nconst element = document.getElementById('myId');\n\n// Query selector (returns first match)\nconst container = document.querySelector('.container');\n\n// Query selector all (returns NodeList)\nconst buttons = document.querySelectorAll('button');\n\n// Get elements by class name\nconst items = document.getElementsByClassName('item');\n\n// Get elements by tag name\nconst paragraphs = document.getElementsByTagName('p');\n\n// Traversing the DOM\nconst parent = element.parentNode;\nconst children = element.children;\nconst next = element.nextElementSibling;\nconst prev = element.previousElementSibling;",explanation:"DOM selection methods:\n• getElementById: Find element by ID\n• querySelector: Use CSS selectors\n• querySelectorAll: Get all matching elements\n• getElementsByClassName: Find by class\n• getElementsByTagName: Find by tag\n• Parent/child relationships\n• Sibling navigation"},{id:"manipulation",title:"DOM Manipulation",icon:l().createElement(r.SG1,null),code:"// Creating elements\nconst div = document.createElement('div');\ndiv.className = 'new-element';\ndiv.textContent = 'Hello World';\n\n// Modifying elements\nelement.innerHTML = '<span>New content</span>';\nelement.textContent = 'Plain text';\nelement.setAttribute('data-id', '123');\nelement.style.color = 'blue';\nelement.classList.add('active');\n\n// Adding to DOM\nparent.appendChild(div);\nparent.insertBefore(div, referenceNode);\nparent.replaceChild(newChild, oldChild);\n\n// Removing from DOM\nelement.remove();\nparent.removeChild(element);",explanation:"Manipulate DOM elements:\n• Create new elements\n• Modify content and attributes\n• Change styles and classes\n• Add elements to the DOM\n• Remove elements\n• Replace elements\n• Clone elements"},{id:"events",title:"Event Handling",icon:l().createElement(r.jTZ,null),code:"// Adding event listeners\nelement.addEventListener('click', function(event) {\n  console.log('Clicked!', event);\n});\n\n// Event object properties\nbutton.addEventListener('click', (e) => {\n  e.preventDefault();  // Prevent default behavior\n  e.stopPropagation(); // Stop event bubbling\n  console.log(e.target); // Element that triggered\n});\n\n// Common events\ndocument.addEventListener('DOMContentLoaded', init);\nelement.addEventListener('mouseover', showTooltip);\nform.addEventListener('submit', handleSubmit);\ninput.addEventListener('change', updateValue);\n\n// Event delegation\ncontainer.addEventListener('click', (e) => {\n  if (e.target.matches('.btn')) {\n    // Handle button clicks\n  }\n});",explanation:"Event handling in JavaScript:\n• addEventListener method\n• Event object and its properties\n• Event types (click, submit, etc.)\n• Event bubbling and capturing\n• Event delegation\n• Preventing default behavior\n• Custom events"},{id:"performance",title:"DOM Performance",icon:l().createElement(r.FrA,null),code:"// Document Fragment\nconst fragment = document.createDocumentFragment();\nfor (let i = 0; i < 1000; i++) {\n  const div = document.createElement('div');\n  div.textContent = `Item ${i}`;\n  fragment.appendChild(div);\n}\ncontainer.appendChild(fragment);\n\n// Batch DOM updates\nrequestAnimationFrame(() => {\n  // Update DOM here\n});\n\n// Efficient querying\nconst cache = document.getElementById('myElement');\n// Reuse cache instead of querying again\n\n// Debouncing events\nfunction debounce(fn, delay) {\n  let timeoutId;\n  return function (...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => fn.apply(this, args), delay);\n  };\n}\n\nconst handleScroll = debounce(() => {\n  // Handle scroll event\n}, 100);",explanation:"Optimize DOM performance:\n• Use DocumentFragment\n• Batch DOM updates\n• Cache DOM queries\n• Debounce event handlers\n• Minimize reflows and repaints\n• Virtual DOM concepts\n• Memory management"}];return l().createElement(i.P.div,{initial:{opacity:0},animate:{opacity:1},transition:{duration:.5}},l().createElement("h1",{className:"text-3xl font-bold mb-6"},"DOM Manipulation"),l().createElement("p",{className:"text-gray-600 mb-8"},"Learn how to interact with the Document Object Model (DOM) to create dynamic and interactive web applications."),l().createElement("div",{className:"space-y-12"},e.map((e=>l().createElement(i.P.div,{key:e.id,initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"border border-gray-200 rounded-xl p-6 hover:border-blue-500 transition-colors"},l().createElement("div",{className:"flex items-center mb-4"},l().createElement("span",{className:"text-blue-600 mr-3"},e.icon),l().createElement("h2",{className:"text-xl font-semibold"},e.title)),l().createElement("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6"},l().createElement("div",null,l().createElement("h3",{className:"text-lg font-medium mb-3"},"Example Code"),l().createElement(o.A,{language:"javascript",style:c.A,className:"rounded-lg"},e.code)),l().createElement("div",null,l().createElement("h3",{className:"text-lg font-medium mb-3"},"Explanation"),l().createElement("p",{className:"text-gray-600 whitespace-pre-line"},e.explanation))))))),l().createElement("div",{className:"mt-12 bg-green-50 rounded-xl p-6"},l().createElement("h3",{className:"text-xl font-semibold mb-4"},"Interactive DOM Playground"),l().createElement("p",{className:"text-gray-600 mb-4"},"Practice DOM manipulation in real-time with our interactive playground."),l().createElement("div",{className:"flex space-x-4"},l().createElement("button",{className:"bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors"},"Open Playground"),l().createElement("button",{className:"border border-green-600 text-green-600 px-6 py-2 rounded-lg hover:bg-green-50 transition-colors"},"View Examples"))),l().createElement(s.default,null))}}}]);