"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[9373],{9373:(e,n,s)=>{s.r(n),s.d(n,{default:()=>c});var t=s(96540),a=s.n(t),r=s(71181),o=s(84976),l=s(42644);const c=()=>a().createElement(r.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},a().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Process in Node.js"),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Introduction to Process"),a().createElement("p",{className:"text-gray-600 mb-4"},"The process object is a global object in Node.js that provides information about, and control over, the current Node.js process. It allows you to handle process events, manage environment variables, and control the process lifecycle."),a().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},a().createElement("div",{className:"flex items-start"},a().createElement(l.cXB,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),a().createElement("div",null,a().createElement("h3",{className:"font-semibold mb-2"},"Key Features"),a().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},a().createElement("li",null,"Process information and control"),a().createElement("li",null,"Environment variable management"),a().createElement("li",null,"Command line arguments"),a().createElement("li",null,"Process events and signals"),a().createElement("li",null,"Standard I/O streams"),a().createElement("li",null,"Exit codes and handlers")))))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Process Information"),a().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},a().createElement("div",{className:"flex items-start"},a().createElement(l.z1n,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),a().createElement("div",null,a().createElement("p",{className:"text-gray-600 mb-4"},"Access basic information about the current process:"),a().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"// Process ID and parent process ID\nconsole.log('Process ID:', process.pid);\nconsole.log('Parent Process ID:', process.ppid);\n\n// Process title\nconsole.log('Process Title:', process.title);\nprocess.title = 'My Node App';\n\n// Current working directory\nconsole.log('Current Directory:', process.cwd());\n\n// Node.js version\nconsole.log('Node Version:', process.version);\nconsole.log('Node Versions:', process.versions);\n\n// CPU usage\nconst startUsage = process.cpuUsage();\n// Do some work...\nconst endUsage = process.cpuUsage(startUsage);\nconsole.log('CPU Usage:', endUsage);\n\n// Memory usage\nconst memoryUsage = process.memoryUsage();\nconsole.log('Memory Usage:', {\n  heapTotal: memoryUsage.heapTotal / 1024 / 1024 + 'MB',\n  heapUsed: memoryUsage.heapUsed / 1024 / 1024 + 'MB',\n  external: memoryUsage.external / 1024 / 1024 + 'MB',\n  rss: memoryUsage.rss / 1024 / 1024 + 'MB'\n});\n\n// Platform information\nconsole.log('Platform:', process.platform);\nconsole.log('Architecture:', process.arch);"))))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Environment Variables"),a().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},a().createElement("div",{className:"flex items-start"},a().createElement(l.VSk,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),a().createElement("div",null,a().createElement("p",{className:"text-gray-600 mb-4"},"Work with environment variables in Node.js:"),a().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"// Access environment variables\nconsole.log('NODE_ENV:', process.env.NODE_ENV);\nconsole.log('PATH:', process.env.PATH);\n\n// Set environment variables\nprocess.env.MY_VARIABLE = 'my value';\nprocess.env.API_KEY = 'secret_key';\n\n// Environment variable management\nfunction getConfig() {\n  return {\n    port: process.env.PORT || 3000,\n    dbUrl: process.env.DATABASE_URL || 'mongodb://localhost:27017',\n    nodeEnv: process.env.NODE_ENV || 'development',\n    apiKey: process.env.API_KEY\n  };\n}\n\n// Check for required environment variables\nfunction validateEnv() {\n  const required = ['API_KEY', 'DATABASE_URL'];\n  const missing = required.filter(key => !process.env[key]);\n  \n  if (missing.length > 0) {\n    console.error('Missing required environment variables:', missing);\n    process.exit(1);\n  }\n}"))))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Command Line Arguments"),a().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},a().createElement("div",{className:"space-y-4"},a().createElement("div",null,a().createElement("h3",{className:"font-semibold mb-2"},"Handling Command Line Arguments"),a().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"// Access command line arguments\nconsole.log('Executable Path:', process.argv[0]);\nconsole.log('Script Path:', process.argv[1]);\nconsole.log('Arguments:', process.argv.slice(2));\n\n// Parse command line arguments\nfunction parseArgs() {\n  const args = process.argv.slice(2);\n  const params = {};\n\n  args.forEach((arg, index) => {\n    if (arg.startsWith('--')) {\n      const key = arg.slice(2);\n      const value = args[index + 1];\n      if (value && !value.startsWith('--')) {\n        params[key] = value;\n      } else {\n        params[key] = true;\n      }\n    }\n  });\n\n  return params;\n}\n\n// Usage example\nconst args = parseArgs();\nconsole.log('Parsed Arguments:', args);\n\n// Example command: node app.js --port 3000 --debug\n// Output: { port: '3000', debug: true }"))))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Process Events and Signals"),a().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},a().createElement("div",{className:"flex items-start"},a().createElement(l.XqQ,{className:"w-6 h-6 text-blue-600 mr-3 mt-1"}),a().createElement("div",null,a().createElement("p",{className:"text-gray-600 mb-4"},"Handle process events and signals:"),a().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"// Handle uncaught exceptions\nprocess.on('uncaughtException', (err) => {\n  console.error('Uncaught Exception:', err);\n  // Perform cleanup\n  process.exit(1);\n});\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  // Perform cleanup\n  process.exit(1);\n});\n\n// Handle process signals\nprocess.on('SIGTERM', () => {\n  console.log('Received SIGTERM. Performing cleanup...');\n  // Cleanup code here\n  process.exit(0);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('Received SIGINT. Performing cleanup...');\n  // Cleanup code here\n  process.exit(0);\n});\n\n// Handle process exit\nprocess.on('exit', (code) => {\n  console.log('Process exiting with code:', code);\n  // Perform synchronous cleanup\n});\n\n// Graceful shutdown example\nfunction gracefulShutdown() {\n  console.log('Starting graceful shutdown...');\n  \n  // Close database connections\n  closeDatabase()\n    .then(() => closeServer())\n    .then(() => {\n      console.log('Cleanup completed');\n      process.exit(0);\n    })\n    .catch(err => {\n      console.error('Error during cleanup:', err);\n      process.exit(1);\n    });\n}"))))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Standard I/O Streams"),a().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},a().createElement("div",{className:"space-y-4"},a().createElement("div",null,a().createElement("h3",{className:"font-semibold mb-2"},"Working with Standard I/O"),a().createElement("div",{className:"bg-gray-100 p-4 rounded font-mono text-sm"},"// Write to stdout\nprocess.stdout.write('Hello ');\nprocess.stdout.write('World\\n');\n\n// Write to stderr\nprocess.stderr.write('Error: Something went wrong\\n');\n\n// Read from stdin\nprocess.stdin.setEncoding('utf8');\n\nprocess.stdin.on('data', (data) => {\n  console.log('Received input:', data.trim());\n});\n\n// Create a simple CLI prompt\nfunction prompt(question) {\n  return new Promise((resolve) => {\n    process.stdout.write(question);\n    \n    process.stdin.once('data', (data) => {\n      resolve(data.toString().trim());\n    });\n  });\n}\n\n// Usage example\nasync function getUserInput() {\n  const name = await prompt('What is your name? ');\n  console.log(`Hello, ${name}!`);\n  process.exit(0);\n}"))))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Best Practices"),a().createElement("div",{className:"bg-white p-6 rounded-lg shadow-sm"},a().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},a().createElement("li",null,"Always handle uncaught exceptions and unhandled rejections"),a().createElement("li",null,"Implement proper cleanup on process exit"),a().createElement("li",null,"Use environment variables for configuration"),a().createElement("li",null,"Validate required environment variables early"),a().createElement("li",null,"Implement graceful shutdown handlers"),a().createElement("li",null,"Be careful with synchronous operations in exit handlers"),a().createElement("li",null,"Use appropriate exit codes"),a().createElement("li",null,"Consider security when handling environment variables")))),a().createElement("div",{className:"mt-12 flex justify-between items-center"},a().createElement(o.N_,{to:"/nodejs-course/os-module",className:"text-blue-600 hover:text-blue-800"},"‚Üê OS Module"),a().createElement(o.N_,{to:"/nodejs-course/crypto-module",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"},"Next: Crypto Module ‚Üí")))}}]);