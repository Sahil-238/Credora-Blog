"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[8084],{8084:(e,t,n)=>{n.r(t),n.d(t,{default:()=>c});var a=n(96540),r=n.n(a),l=n(71181),m=n(84976),s=n(42644),i=n(58027),o=n(90956);const c=()=>r().createElement(l.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},r().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Formik in React"),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Understanding Formik"),r().createElement("p",{className:"text-gray-600 mb-4"},"Formik is a popular form library for React that helps you handle form state, validation, and submission with ease. It reduces the amount of boilerplate code needed for complex forms."),r().createElement("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-4"},r().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},r().createElement(s.X3y,{className:"text-2xl text-blue-600 mb-2"}),r().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Form State"),r().createElement("p",{className:"text-gray-600"},"Manages form values and errors")),r().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},r().createElement(s.NLe,{className:"text-2xl text-blue-600 mb-2"}),r().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Validation"),r().createElement("p",{className:"text-gray-600"},"Built-in validation support")),r().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},r().createElement(s.PjK,{className:"text-2xl text-blue-600 mb-2"}),r().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Components"),r().createElement("p",{className:"text-gray-600"},"Reusable form components")))),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Basic Formik Usage"),r().createElement("p",{className:"text-gray-600 mb-4"},"The most common way to use Formik is with the Formik component, which provides a render prop API for form state and handlers."),r().createElement(i.A,{language:"jsx",style:o.A,className:"rounded-lg"},'import { Formik, Form, Field, ErrorMessage } from \'formik\';\n\nfunction LoginForm() {\n  return (\n    <Formik\n      initialValues={{\n        email: \'\',\n        password: \'\',\n        rememberMe: false\n      }}\n      validate={values => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = \'Required\';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = \'Invalid email address\';\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <div>\n            <Field type="email" name="email" />\n            <ErrorMessage name="email" component="div" />\n          </div>\n\n          <div>\n            <Field type="password" name="password" />\n            <ErrorMessage name="password" component="div" />\n          </div>\n\n          <div>\n            <Field type="checkbox" name="rememberMe" />\n            <label>Remember me</label>\n          </div>\n\n          <button type="submit" disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n}')),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"useFormik Hook"),r().createElement("p",{className:"text-gray-600 mb-4"},"For more granular control, you can use the useFormik hook to manage form state and validation manually."),r().createElement(i.A,{language:"jsx",style:o.A,className:"rounded-lg"},"import { useFormik } from 'formik';\n\nfunction SignupForm() {\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: ''\n    },\n    validationSchema: Yup.object({\n      firstName: Yup.string()\n        .max(15, 'Must be 15 characters or less')\n        .required('Required'),\n      lastName: Yup.string()\n        .max(20, 'Must be 20 characters or less')\n        .required('Required'),\n      email: Yup.string()\n        .email('Invalid email address')\n        .required('Required')\n    }),\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <input\n        id=\"firstName\"\n        name=\"firstName\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.firstName}\n      />\n      {formik.touched.firstName && formik.errors.firstName ? (\n        <div>{formik.errors.firstName}</div>\n      ) : null}\n\n      <input\n        id=\"lastName\"\n        name=\"lastName\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.lastName}\n      />\n      {formik.touched.lastName && formik.errors.lastName ? (\n        <div>{formik.errors.lastName}</div>\n      ) : null}\n\n      <input\n        id=\"email\"\n        name=\"email\"\n        type=\"email\"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.email}\n      />\n      {formik.touched.email && formik.errors.email ? (\n        <div>{formik.errors.email}</div>\n      ) : null}\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}")),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Dynamic Form Fields"),r().createElement("p",{className:"text-gray-600 mb-4"},"Formik provides FieldArray for handling dynamic form fields, perfect for forms with arrays or lists."),r().createElement(i.A,{language:"jsx",style:o.A,className:"rounded-lg"},'import { Formik, Field, FieldArray } from \'formik\';\n\nfunction FriendList() {\n  return (\n    <Formik\n      initialValues={{ friends: [\'\'] }}\n      onSubmit={values => console.log(values)}\n    >\n      {({ values }) => (\n        <Form>\n          <FieldArray\n            name="friends"\n            render={arrayHelpers => (\n              <div>\n                {values.friends.map((friend, index) => (\n                  <div key={index}>\n                    <Field name={"friends." + index} />\n                    <button\n                      type="button"\n                      onClick={() => arrayHelpers.remove(index)}\n                    >\n                      Remove\n                    </button>\n                  </div>\n                ))}\n                <button\n                  type="button"\n                  onClick={() => arrayHelpers.push(\'\')}\n                >\n                  Add Friend\n                </button>\n              </div>\n            )}\n          />\n          <button type="submit">Submit</button>\n        </Form>\n      )}\n    </Formik>\n  );\n}')),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Formik Best Practices"),r().createElement("div",{className:"bg-white shadow-md rounded-lg p-6"},r().createElement("ul",{className:"list-disc list-inside space-y-3 text-gray-600"},r().createElement("li",null,"Use Yup for schema validation"),r().createElement("li",null,"Implement proper error handling"),r().createElement("li",null,"Use Field components for better performance"),r().createElement("li",null,"Handle form submission states properly"),r().createElement("li",null,"Implement proper form reset functionality"),r().createElement("li",null,"Use FastField for performance optimization"),r().createElement("li",null,"Implement proper form submission feedback")))),r().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-8"},r().createElement("h3",{className:"text-lg font-semibold text-blue-800 mb-2"},"Pro Tips"),r().createElement("ul",{className:"list-disc list-inside space-y-2 text-blue-700"},r().createElement("li",null,"Use TypeScript for better type safety"),r().createElement("li",null,"Create reusable form components"),r().createElement("li",null,"Implement proper form submission states"),r().createElement("li",null,"Use FastField for better performance"))),r().createElement("div",{className:"mt-12 flex justify-between items-center"},r().createElement(m.N_,{to:"/react-course/form-validation",className:"text-blue-600 hover:text-blue-800 flex items-center"},r().createElement(s.PjK,{className:"mr-2"})," Previous: Form Validation"),r().createElement(m.N_,{to:"/react-course/react-hook-form",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center"},"Next: React Hook Form ",r().createElement(s.PjK,{className:"ml-2"}))))}}]);