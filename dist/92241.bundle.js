"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[92241],{92241:(e,n,a)=>{a.r(n),a.d(n,{default:()=>c});var t=a(96540),r=a.n(t),s=a(71181),l=a(84976),i=a(42644),o=a(58027),m=a(90956);const c=()=>r().createElement(s.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},r().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Form Validation in React"),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Understanding Form Validation"),r().createElement("p",{className:"text-gray-600 mb-4"},"Form validation is crucial for ensuring data quality and providing a good user experience. React offers several approaches to implement form validation, from basic validation to advanced schema-based solutions."),r().createElement("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-4"},r().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},r().createElement(i.y3G,{className:"text-2xl text-blue-600 mb-2"}),r().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Client-side"),r().createElement("p",{className:"text-gray-600"},"Immediate feedback and validation before submission")),r().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},r().createElement(i.A3x,{className:"text-2xl text-blue-600 mb-2"}),r().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Schema-based"),r().createElement("p",{className:"text-gray-600"},"Structured validation rules using libraries")),r().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},r().createElement(i.PjK,{className:"text-2xl text-blue-600 mb-2"}),r().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Custom"),r().createElement("p",{className:"text-gray-600"},"Custom validation logic for specific needs")))),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Basic Form Validation"),r().createElement("p",{className:"text-gray-600 mb-4"},"The simplest approach is to implement validation logic directly in your component. This gives you full control over the validation process."),r().createElement(o.A,{language:"jsx",style:m.A,className:"rounded-lg"},"import React, { useState } from 'react';\n\nfunction SignupForm() {\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: ''\n  });\n  const [errors, setErrors] = useState({});\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n\n    // Username validation\n    if (!formData.username.trim()) {\n      newErrors.username = 'Username is required';\n    } else if (formData.username.length < 3) {\n      newErrors.username = 'Username must be at least 3 characters';\n    }\n\n    // Email validation\n    if (!formData.email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Email is invalid';\n    }\n\n    // Password validation\n    if (!formData.password) {\n      newErrors.password = 'Password is required';\n    } else if (formData.password.length < 6) {\n      newErrors.password = 'Password must be at least 6 characters';\n    }\n\n    return newErrors;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const validationErrors = validateForm();\n\n    if (Object.keys(validationErrors).length === 0) {\n      // Form is valid, proceed with submission\n      console.log('Form submitted:', formData);\n    } else {\n      setErrors(validationErrors);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <input\n          type=\"text\"\n          name=\"username\"\n          value={formData.username}\n          onChange={handleChange}\n          placeholder=\"Username\"\n        />\n        {errors.username && <span style={{ color: 'red' }}>{errors.username}</span>}\n      </div>\n      {/* Additional fields for email and password */}\n    </form>\n  );\n}\n")),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Custom Validation Hook"),r().createElement("p",{className:"text-gray-600 mb-4"},"Create reusable validation logic by extracting it into a custom hook. This approach helps maintain consistency across forms and reduces code duplication."),r().createElement(o.A,{language:"jsx",style:m.A,className:"rounded-lg"},"import { useState, useEffect } from 'react';\n\n// Custom validation hook\nfunction useFormValidation(initialState, validate) {\n  const [values, setValues] = useState(initialState);\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(() => {\n    if (isSubmitting) {\n      const noErrors = Object.keys(errors).length === 0;\n      if (noErrors) {\n        // Callback for successful validation\n        console.log('Form is valid:', values);\n      }\n      setIsSubmitting(false);\n    }\n  }, [errors, isSubmitting, values]);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  return {\n    values,\n    errors,\n    handleChange,\n    handleSubmit\n  };\n}\n\n// Usage\nfunction SignupForm() {\n  const {\n    values,\n    errors,\n    handleChange,\n    handleSubmit\n  } = useFormValidation(\n    { email: '', password: '' },\n    validateSignup // define this function to validate form values\n  );\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"email\"\n        value={values.email}\n        onChange={handleChange}\n        placeholder=\"Email\"\n      />\n      {errors.email && <p style={{ color: 'red' }}>{errors.email}</p>}\n      {/* Other fields */}\n    </form>\n  );\n}\n")),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Schema-based Validation"),r().createElement("p",{className:"text-gray-600 mb-4"},"Using schema validation libraries like Yup provides a declarative way to define validation rules and integrates well with form libraries like Formik."),r().createElement(o.A,{language:"jsx",style:m.A,className:"rounded-lg"},"import * as Yup from 'yup';\nimport { Formik, Form, Field } from 'formik';\n\nconst validationSchema = Yup.object().shape({\n  username: Yup.string()\n    .required('Username is required')\n    .min(3, 'Username must be at least 3 characters'),\n  email: Yup.string()\n    .required('Email is required')\n    .email('Invalid email format'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(6, 'Password must be at least 6 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n      'Password must contain at least one uppercase letter, one lowercase letter, and one number'\n    ),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Confirm password is required')\n});\n\n// Usage with Formik\nfunction SignupForm() {\n  return (\n    <Formik\n      initialValues={{\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n      }}\n      validationSchema={validationSchema}\n      onSubmit={values => {\n        console.log(values);\n      }}\n    >\n      {({ errors, touched }) => (\n        <Form>\n          <Field name=\"username\" placeholder=\"Username\" />\n          {errors.username && touched.username && (\n            <div style={{ color: 'red' }}>{errors.username}</div>\n          )}\n          {/* Other fields */}\n        </Form>\n      )}\n    </Formik>\n  );\n}\n")),r().createElement("section",{className:"mb-8"},r().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Validation Best Practices"),r().createElement("div",{className:"bg-white shadow-md rounded-lg p-6"},r().createElement("ul",{className:"list-disc list-inside space-y-3 text-gray-600"},r().createElement("li",null,"Validate both on submit and on change/blur for better UX"),r().createElement("li",null,"Provide clear, actionable error messages"),r().createElement("li",null,"Consider accessibility in error presentation"),r().createElement("li",null,"Implement both client and server-side validation"),r().createElement("li",null,"Use appropriate HTML5 input types and attributes"),r().createElement("li",null,"Consider async validation for unique fields"),r().createElement("li",null,"Handle all possible edge cases")))),r().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-8"},r().createElement("h3",{className:"text-lg font-semibold text-blue-800 mb-2"},"Pro Tips"),r().createElement("ul",{className:"list-disc list-inside space-y-2 text-blue-700"},r().createElement("li",null,"Use debouncing for real-time validation"),r().createElement("li",null,"Consider using validation libraries for complex forms"),r().createElement("li",null,"Implement progressive enhancement"),r().createElement("li",null,"Test validation logic thoroughly"))),r().createElement("div",{className:"mt-12 flex justify-between items-center"},r().createElement(l.N_,{to:"/react-course/uncontrolled-components",className:"text-blue-600 hover:text-blue-800 flex items-center"},r().createElement(i.PjK,{className:"mr-2"})," Previous: Uncontrolled Components"),r().createElement(l.N_,{to:"/react-course/formik",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center"},"Next: Formik ",r().createElement(i.PjK,{className:"ml-2"}))))}}]);