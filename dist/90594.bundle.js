"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[90594],{90594:(e,n,t)=>{t.r(n),t.d(n,{default:()=>c});var r=t(96540),a=t.n(r),s=t(71181),l=t(84976),m=t(42644),o=t(58027),i=t(90956);const c=()=>a().createElement(s.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto p-6"},a().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"React Hook Form"),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Understanding React Hook Form"),a().createElement("p",{className:"text-gray-600 mb-4"},"React Hook Form is a performant, flexible and extensible forms library with easy-to-use validation. It provides a simpler form validation method with less code and better performance."),a().createElement("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-4"},a().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},a().createElement(m.X3y,{className:"text-2xl text-blue-600 mb-2"}),a().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Performance"),a().createElement("p",{className:"text-gray-600"},"Minimizes re-renders")),a().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},a().createElement(m.NLe,{className:"text-2xl text-blue-600 mb-2"}),a().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Easy to Use"),a().createElement("p",{className:"text-gray-600"},"Simple API and built-in validation")),a().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},a().createElement(m.PjK,{className:"text-2xl text-blue-600 mb-2"}),a().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Flexible"),a().createElement("p",{className:"text-gray-600"},"Works with any UI library")))),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Basic Usage"),a().createElement("p",{className:"text-gray-600 mb-4"},"React Hook Form provides a simple way to handle form validation and submission using hooks."),a().createElement(o.A,{language:"jsx",style:i.A,className:"rounded-lg"},"import { useForm } from 'react-hook-form';\n\nfunction LoginForm() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors }\n  } = useForm();\n\n  const onSubmit = (data) => {\n    console.log(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div>\n        <input\n          {...register('email', {\n            required: 'Email is required',\n            pattern: {\n              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n              message: 'Invalid email address'\n            }\n          })}\n        />\n        {errors.email && <span>{errors.email.message}</span>}\n      </div>\n\n      <div>\n        <input\n          type=\"password\"\n          {...register('password', {\n            required: 'Password is required',\n            minLength: {\n              value: 6,\n              message: 'Password must be at least 6 characters'\n            }\n          })}\n        />\n        {errors.password && <span>{errors.password.message}</span>}\n      </div>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Advanced Validation with Yup"),a().createElement("p",{className:"text-gray-600 mb-4"},"React Hook Form can be integrated with Yup for schema-based validation, providing a more declarative way to define validation rules."),a().createElement(o.A,{language:"jsx",style:i.A,className:"rounded-lg"},"import { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  username: yup\n    .string()\n    .required('Username is required')\n    .min(3, 'Username must be at least 3 characters'),\n  email: yup\n    .string()\n    .required('Email is required')\n    .email('Invalid email format'),\n  password: yup\n    .string()\n    .required('Password is required')\n    .min(6, 'Password must be at least 6 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n      'Password must contain at least one uppercase letter, one lowercase letter, and one number'\n    ),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match')\n    .required('Confirm password is required')\n});\n\nfunction SignupForm() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  const onSubmit = (data) => {\n    console.log(data);\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div>\n        <input {...register('username')} placeholder=\"Username\" />\n        {errors.username && <span>{errors.username.message}</span>}\n      </div>\n\n      <div>\n        <input {...register('email')} placeholder=\"Email\" />\n        {errors.email && <span>{errors.email.message}</span>}\n      </div>\n\n      <div>\n        <input\n          type=\"password\"\n          {...register('password')}\n          placeholder=\"Password\"\n        />\n        {errors.password && <span>{errors.password.message}</span>}\n      </div>\n\n      <div>\n        <input\n          type=\"password\"\n          {...register('confirmPassword')}\n          placeholder=\"Confirm Password\"\n        />\n        {errors.confirmPassword && (\n          <span>{errors.confirmPassword.message}</span>\n        )}\n      </div>\n\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  );\n}")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Dynamic Form Fields"),a().createElement("p",{className:"text-gray-600 mb-4"},"useFieldArray hook makes it easy to handle dynamic form fields, perfect for forms with repeatable sections."),a().createElement(o.A,{language:"jsx",style:i.A,className:"rounded-lg"},"import { useFieldArray, useForm } from 'react-hook-form';\n\nfunction DynamicForm() {\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({\n    defaultValues: {\n      users: [{ name: '', email: '' }]\n    }\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'users'\n  });\n\n  const onSubmit = (data) => console.log(data);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {fields.map((field, index) => (\n        <div key={field.id}>\n          <input\n            {...register(`users.${index}.name`, {\n              required: 'Name is required'\n            })}\n            placeholder=\"Name\"\n          />\n          {errors.users?.[index]?.name && (\n            <span>{errors.users[index].name.message}</span>\n          )}\n\n          <input\n            {...register(`users.${index}.email`, {\n              required: 'Email is required',\n              pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                message: 'Invalid email address'\n              }\n            })}\n            placeholder=\"Email\"\n          />\n          {errors.users?.[index]?.email && (\n            <span>{errors.users[index].email.message}</span>\n          )}\n\n          <button type=\"button\" onClick={() => remove(index)}>\n            Remove\n          </button>\n        </div>\n      ))}\n\n      <button\n        type=\"button\"\n        onClick={() => append({ name: '', email: '' })}\n      >\n        Add User\n      </button>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}")),a().createElement("section",{className:"mb-8"},a().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"React Hook Form Best Practices"),a().createElement("div",{className:"bg-white shadow-md rounded-lg p-6"},a().createElement("ul",{className:"list-disc list-inside space-y-3 text-gray-600"},a().createElement("li",null,"Use TypeScript for better type safety"),a().createElement("li",null,"Implement proper error handling"),a().createElement("li",null,"Use form validation schemas"),a().createElement("li",null,"Handle form submission states"),a().createElement("li",null,"Implement proper form reset"),a().createElement("li",null,"Use Controller for complex inputs"),a().createElement("li",null,"Implement proper error messages")))),a().createElement("div",{className:"bg-blue-50 border-l-4 border-blue-500 p-4 my-8"},a().createElement("h3",{className:"text-lg font-semibold text-blue-800 mb-2"},"Pro Tips"),a().createElement("ul",{className:"list-disc list-inside space-y-2 text-blue-700"},a().createElement("li",null,"Use DevTools for debugging"),a().createElement("li",null,"Implement form state persistence"),a().createElement("li",null,"Use watch API sparingly"),a().createElement("li",null,"Leverage useFormContext for nested forms"))),a().createElement("div",{className:"mt-12 flex justify-between items-center"},a().createElement(l.N_,{to:"/react-course/formik",className:"text-blue-600 hover:text-blue-800 flex items-center"},a().createElement(m.PjK,{className:"mr-2"})," Previous: Formik"),a().createElement(l.N_,{to:"/react-course/yup",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center"},"Next: Yup Validation ",a().createElement(m.PjK,{className:"ml-2"}))))}}]);