"use strict";(self.webpackChunkcredora_blog=self.webpackChunkcredora_blog||[]).push([[90573],{90573:(e,t,n)=>{n.r(t),n.d(t,{default:()=>c});var r=n(96540),s=n.n(r),a=n(71181),o=n(42644),l=n(84976);const c=()=>{const[e,t]=(0,r.useState)("unit"),[n,c]=(0,r.useState)(!1),i={unit:{title:"Unit Testing",code:"import { render, screen, fireEvent } from '@testing-library/react';\nimport Counter from './Counter';\n\ndescribe('Counter Component', () => {\n  test('renders initial count of 0', () => {\n    render(<Counter />);\n    expect(screen.getByText(/count: 0/i)).toBeInTheDocument();\n  });\n\n  test('increments count when button is clicked', () => {\n    render(<Counter />);\n    const button = screen.getByRole('button', { name: /increment/i });\n    fireEvent.click(button);\n    expect(screen.getByText(/count: 1/i)).toBeInTheDocument();\n  });\n});",explanation:"Unit tests verify individual components in isolation."},integration:{title:"Integration Testing",code:"import { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport TodoList from './TodoList';\n\ndescribe('TodoList Integration', () => {\n  test('adds and completes a todo', async () => {\n    render(<TodoList />);\n    \n    // Add new todo\n    const input = screen.getByPlaceholderText(/add todo/i);\n    const addButton = screen.getByRole('button', { name: /add/i });\n    \n    await userEvent.type(input, 'New Todo');\n    await userEvent.click(addButton);\n    \n    // Verify todo was added\n    expect(screen.getByText('New Todo')).toBeInTheDocument();\n    \n    // Complete todo\n    const checkbox = screen.getByRole('checkbox');\n    await userEvent.click(checkbox);\n    \n    // Verify todo was completed\n    await waitFor(() => {\n      expect(checkbox).toBeChecked();\n    });\n  });\n});",explanation:"Integration tests verify multiple components working together."},snapshot:{title:"Snapshot Testing",code:"import renderer from 'react-test-renderer';\nimport Button from './Button';\n\ndescribe('Button Component', () => {\n  test('matches snapshot', () => {\n    const tree = renderer\n      .create(<Button label=\"Click me\" onClick={() => {}} />)\n      .toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n\n  test('matches disabled snapshot', () => {\n    const tree = renderer\n      .create(<Button label=\"Click me\" disabled />)\n      .toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n});",explanation:"Snapshot tests capture component output and detect changes."},e2e:{title:"E2E Testing",code:"import { test, expect } from '@playwright/test';\n\ntest('user can login and view dashboard', async ({ page }) => {\n  await page.goto('/login');\n  \n  // Fill login form\n  await page.fill('[name=email]', 'user@example.com');\n  await page.fill('[name=password]', 'password123');\n  await page.click('button[type=submit]');\n  \n  // Verify redirect to dashboard\n  await expect(page).toHaveURL('/dashboard');\n  \n  // Verify dashboard content\n  await expect(page.getByRole('heading', {\n    name: 'Welcome back'\n  })).toBeVisible();\n});",explanation:"End-to-end tests verify complete user flows in a real browser environment."}};return s().createElement(a.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"max-w-4xl mx-auto"},s().createElement("h1",{className:"text-3xl font-bold text-gray-800 mb-6"},"Testing React Applications"),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Understanding Testing"),s().createElement("p",{className:"text-gray-600 mb-4"},"Testing is crucial for maintaining reliable React applications. Different types of tests serve different purposes and provide various levels of confidence."),s().createElement("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-4"},s().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},s().createElement(o.A3x,{className:"text-2xl text-blue-600 mb-2"}),s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Unit Tests"),s().createElement("p",{className:"text-gray-600"},"Test individual components")),s().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},s().createElement(o.PjK,{className:"text-2xl text-blue-600 mb-2"}),s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Integration Tests"),s().createElement("p",{className:"text-gray-600"},"Test component interactions")),s().createElement("div",{className:"bg-white p-4 rounded-lg shadow"},s().createElement(o.pcC,{className:"text-2xl text-blue-600 mb-2"}),s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"E2E Tests"),s().createElement("p",{className:"text-gray-600"},"Test complete user flows")))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Testing Examples"),s().createElement("div",{className:"bg-white rounded-lg shadow overflow-hidden"},s().createElement("div",{className:"flex border-b overflow-x-auto"},Object.entries(i).map((n=>{let[r,a]=n;return s().createElement("button",{key:r,className:"px-6 py-3 whitespace-nowrap ".concat(e===r?"bg-blue-50 text-blue-600 border-b-2 border-blue-600":"text-gray-600 hover:bg-gray-50"),onClick:()=>t(r)},a.title)}))),s().createElement("div",{className:"p-6"},s().createElement("pre",{className:"bg-gray-900 text-gray-100 p-4 rounded-lg font-mono text-sm mb-4"},i[e].code),s().createElement("p",{className:"text-gray-600"},i[e].explanation)))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Testing Best Practices"),s().createElement("div",{className:"space-y-4"},s().createElement("div",{className:"bg-white p-6 rounded-lg shadow"},s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Test Organization"),s().createElement("pre",{className:"bg-gray-900 text-gray-100 p-4 rounded-lg font-mono text-sm"},"// Component file structure\nsrc/\n  components/\n    Button/\n      Button.jsx\n      Button.test.jsx\n      Button.styles.js\n      index.js\n\n// Test file organization\ndescribe('Button Component', () => {\n  describe('Rendering', () => {\n    test('renders with default props', () => {});\n    test('renders in disabled state', () => {});\n  });\n\n  describe('Interactions', () => {\n    test('calls onClick when clicked', () => {});\n    test('does not call onClick when disabled', () => {});\n  });\n});")),s().createElement("div",{className:"bg-white p-6 rounded-lg shadow"},s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Testing Hooks"),s().createElement("pre",{className:"bg-gray-900 text-gray-100 p-4 rounded-lg font-mono text-sm"},"import { renderHook, act } from '@testing-library/react-hooks';\nimport useCounter from './useCounter';\n\ntest('should increment counter', () => {\n  const { result } = renderHook(() => useCounter());\n\n  act(() => {\n    result.current.increment();\n  });\n\n  expect(result.current.count).toBe(1);\n});")))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Testing Tools"),s().createElement("div",{className:"space-y-4"},s().createElement("div",{className:"bg-white p-6 rounded-lg shadow"},s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Jest Configuration"),s().createElement("pre",{className:"bg-gray-900 text-gray-100 p-4 rounded-lg font-mono text-sm"},"// jest.config.js\nmodule.exports = {\n  testEnvironment: 'jsdom',\n  setupFilesAfterEnv: ['<rootDir>/src/setupTests.js'],\n  moduleNameMapper: {\n    '\\.(css|less|scss)$': 'identity-obj-proxy',\n    '^@/(.*)$': '<rootDir>/src/$1'\n  },\n  collectCoverageFrom: [\n    'src/**/*.{js,jsx}',\n    '!src/**/*.d.ts',\n    '!src/**/*.stories.{js,jsx}'\n  ],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    }\n  }\n};")),s().createElement("div",{className:"bg-white p-6 rounded-lg shadow"},s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Custom Test Utilities"),s().createElement("pre",{className:"bg-gray-900 text-gray-100 p-4 rounded-lg font-mono text-sm"},"// test-utils.js\nimport { render } from '@testing-library/react';\nimport { ThemeProvider } from './ThemeContext';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst AllTheProviders = ({ children }) => {\n  return (\n    <Provider store={store}>\n      <ThemeProvider>{children}</ThemeProvider>\n    </Provider>\n  );\n};\n\nconst customRender = (ui, options) =>\n  render(ui, { wrapper: AllTheProviders, ...options });\n\nexport * from '@testing-library/react';\nexport { customRender as render };")))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Advanced Testing"),s().createElement("button",{onClick:()=>c(!n),className:"mb-4 text-blue-600 hover:text-blue-800"},n?"Hide Advanced Topics":"Show Advanced Topics"),n&&s().createElement("div",{className:"space-y-4"},s().createElement("div",{className:"bg-white p-6 rounded-lg shadow"},s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Testing Async Code"),s().createElement("pre",{className:"bg-gray-900 text-gray-100 p-4 rounded-lg font-mono text-sm"},"test('loads user data', async () => {\n  const mockUser = { id: 1, name: 'John' };\n  jest.spyOn(api, 'fetchUser').mockResolvedValue(mockUser);\n\n  render(<UserProfile userId={1} />);\n  \n  expect(screen.getByText(/loading/i)).toBeInTheDocument();\n  \n  await waitFor(() => {\n    expect(screen.getByText(mockUser.name)).toBeInTheDocument();\n  });\n  \n  expect(api.fetchUser).toHaveBeenCalledWith(1);\n});")),s().createElement("div",{className:"bg-white p-6 rounded-lg shadow"},s().createElement("h3",{className:"text-lg font-semibold text-gray-700 mb-2"},"Testing Error Boundaries"),s().createElement("pre",{className:"bg-gray-900 text-gray-100 p-4 rounded-lg font-mono text-sm"},"const ErrorBoundary = ({ children }) => {\n  const [hasError, setHasError] = useState(false);\n  \n  if (hasError) {\n    return <div>Something went wrong</div>;\n  }\n  \n  return children;\n};\n\ntest('renders error message on error', () => {\n  const ThrowError = () => {\n    throw new Error('Test error');\n  };\n  \n  render(\n    <ErrorBoundary>\n      <ThrowError />\n    </ErrorBoundary>\n  );\n  \n  expect(screen.getByText(/something went wrong/i))\n    .toBeInTheDocument();\n});")))),s().createElement("section",{className:"mb-8"},s().createElement("h2",{className:"text-2xl font-semibold text-gray-700 mb-4"},"Exercise"),s().createElement("div",{className:"bg-white p-6 rounded-lg shadow"},s().createElement("p",{className:"text-gray-600 mb-4"},"Create a test suite for a form component with the following requirements:"),s().createElement("div",{className:"bg-gray-100 p-4 rounded"},s().createElement("p",{className:"text-gray-700 font-semibold"},"Requirements:"),s().createElement("ul",{className:"list-disc list-inside text-gray-600 space-y-2"},s().createElement("li",null,"Unit tests for form validation"),s().createElement("li",null,"Integration tests for form submission"),s().createElement("li",null,"Snapshot tests for different form states"),s().createElement("li",null,"Mock API calls and test error handling"),s().createElement("li",null,"Test accessibility compliance"))))),s().createElement("div",{className:"mt-12 flex justify-between items-center"},s().createElement(l.N_,{to:"/react-course/performance",className:"text-blue-600 hover:text-blue-800"},"← Previous: Performance"),s().createElement(l.N_,{to:"/react-course/deployment",className:"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"},"Next: Deployment →")))}}}]);